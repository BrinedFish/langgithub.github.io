<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://langgithub.github.io/"/>
  <updated>2020-08-21T03:54:29.142Z</updated>
  <id>https://langgithub.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>scrapy-信号(5)</title>
    <link href="https://langgithub.github.io/2020/08/21/scrapy-%E4%BF%A1%E5%8F%B7(5)/"/>
    <id>https://langgithub.github.io/2020/08/21/scrapy-信号(5)/</id>
    <published>2020-08-21T03:48:48.301Z</published>
    <updated>2020-08-21T03:54:29.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scrapy-信号-5"><a href="#scrapy-信号-5" class="headerlink" title="scrapy-信号(5)"></a>scrapy-信号(5)</h1><h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><h2 id="操作系统-single"><a href="#操作系统-single" class="headerlink" title="操作系统 single"></a>操作系统 single</h2><blockquote><ul><li>操作系统信息即软中断，异步进行一些事件处理</li><li>信号总结 <a href="https://www.cnblogs.com/taobataoma/archive/2007/08/30/875743.html" target="_blank" rel="noopener">https://www.cnblogs.com/taobataoma/archive/2007/08/30/875743.html</a></li></ul></blockquote><h2 id="scrapy-single"><a href="#scrapy-single" class="headerlink" title="scrapy single"></a>scrapy single</h2><h3 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h3><blockquote><ul><li>源码位置 ./python3.6/site-packages/scrapy/signalmanager.py</li><li>原理 通过from pydispatch import dispatcher来实现</li></ul></blockquote><h3 id="信号总结"><a href="#信号总结" class="headerlink" title="信号总结"></a>信号总结</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;scrapy-信号-5&quot;&gt;&lt;a href=&quot;#scrapy-信号-5&quot; class=&quot;headerlink&quot; title=&quot;scrapy-信号(5)&quot;&gt;&lt;/a&gt;scrapy-信号(5)&lt;/h1&gt;&lt;h2 id=&quot;General&quot;&gt;&lt;a href=&quot;#General&quot;
      
    
    </summary>
    
      <category term="爬虫-scrapy" scheme="https://langgithub.github.io/categories/%E7%88%AC%E8%99%AB-scrapy/"/>
    
    
      <category term="scrapy" scheme="https://langgithub.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>scrapy-scrapy如何循环(3)</title>
    <link href="https://langgithub.github.io/2020/08/20/scrapy-scrapy%E5%A6%82%E4%BD%95%E5%BE%AA%E7%8E%AF(3)/"/>
    <id>https://langgithub.github.io/2020/08/20/scrapy-scrapy如何循环(3)/</id>
    <published>2020-08-20T08:39:03.719Z</published>
    <updated>2020-08-21T02:07:59.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scrapy-scrapy如何循环"><a href="#scrapy-scrapy如何循环" class="headerlink" title="scrapy-scrapy如何循环"></a>scrapy-scrapy如何循环</h1><!-- TOC --><ul><li><ol><li>General</li></ol></li><li><ol start="2"><li>Scrapy 轮询逻辑</li></ol></li><li><ol start="3"><li>_next_request_from_scheduler</li></ol></li></ul><!-- /TOC --><h2 id="1-General"><a href="#1-General" class="headerlink" title="1. General"></a>1. General</h2><p>scrapy 循环核心是reactor 只的task.LoopingCall，并启动每隔slot.heartbeat.start(5) 5秒调度一次</p><h2 id="2-Scrapy-轮询逻辑"><a href="#2-Scrapy-轮询逻辑" class="headerlink" title="2. Scrapy 轮询逻辑"></a>2. Scrapy 轮询逻辑</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">def _next_request(self, spider):</span><br><span class="line">    slot = self.slot</span><br><span class="line">    if not slot:</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    if self.paused:</span><br><span class="line">        return</span><br><span class="line">    # 限制并发数的（如果request连接大于小于一个数，respons内容小于一个数）继续网络下载抓取</span><br><span class="line">    while not self._needs_backout(spider):</span><br><span class="line">        # 1. 网络下载</span><br><span class="line">        if not self._next_request_from_scheduler(spider):</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">    if slot.start_requests and not self._needs_backout(spider):</span><br><span class="line">        try:</span><br><span class="line">            # 2. 第一次启动调用自己写的start_requests</span><br><span class="line">            request = next(slot.start_requests)</span><br><span class="line">        except StopIteration:</span><br><span class="line">            slot.start_requests = None</span><br><span class="line">        except Exception:</span><br><span class="line">            slot.start_requests = None</span><br><span class="line">            logger.error(&apos;Error while obtaining start requests&apos;,</span><br><span class="line">                            exc_info=True, extra=&#123;&apos;spider&apos;: spider&#125;)</span><br><span class="line">        else:</span><br><span class="line">            self.crawl(request, spider)</span><br><span class="line"></span><br><span class="line">    if self.spider_is_idle(spider) and slot.close_if_idle:</span><br><span class="line">        # 3. 开启redis新的调度</span><br><span class="line">        self._spider_idle(spider)</span><br></pre></td></tr></table></figure><ol><li>_next_request 相当于while true中的循环体</li><li>循环体中有3次集合用于获取种子<ul><li>self._next_request_from_scheduler(spider) 第一处也是最重要的一处</li><li>request = next(slot.start_requests) 第二处获取种子，也就是自己重写的start_requests</li><li>self._spider_idle(spider) 注册了signals.spider_idle 信号的，比如scrapy-redis</li></ul></li><li>外层调度方式 self.crawler.engine.crawl 把种子传进来</li><li>self.heartbeat = task.LoopingCall(nextcall.schedule)，slot.heartbeat.start(5) 这才是循环的核心</li></ol><h2 id="3-next-request-from-scheduler"><a href="#3-next-request-from-scheduler" class="headerlink" title="3. _next_request_from_scheduler"></a>3. _next_request_from_scheduler</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;scrapy-scrapy如何循环&quot;&gt;&lt;a href=&quot;#scrapy-scrapy如何循环&quot; class=&quot;headerlink&quot; title=&quot;scrapy-scrapy如何循环&quot;&gt;&lt;/a&gt;scrapy-scrapy如何循环&lt;/h1&gt;&lt;!-- TOC --&gt;

      
    
    </summary>
    
      <category term="爬虫-scrapy" scheme="https://langgithub.github.io/categories/%E7%88%AC%E8%99%AB-scrapy/"/>
    
    
      <category term="scrapy" scheme="https://langgithub.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>scrapy-中间件源码分析(4)</title>
    <link href="https://langgithub.github.io/2020/08/19/scrapy-%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(4)/"/>
    <id>https://langgithub.github.io/2020/08/19/scrapy-中间件源码分析(4)/</id>
    <published>2020-08-19T08:41:59.462Z</published>
    <updated>2020-08-21T03:36:04.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scrapy-中间件源码分析-3"><a href="#scrapy-中间件源码分析-3" class="headerlink" title="scrapy-中间件源码分析(3)"></a>scrapy-中间件源码分析(3)</h1><!-- TOC --><ul><li><ol><li>General</li></ol></li><li><ol start="2"><li>MiddlewareManager（父）<ul><li>2.1. MiddlewareManager 是中间件的抽象类，他的子类包括.以及代码中加载顺序</li><li>2.2. MiddlewareManager 初始化</li><li>2.3. 存储数据结构</li></ul></li></ol></li><li><ol start="3"><li>ExtensionManager（子）<ul><li>3.1. 首先看下程序启动时的打印代码 </li><li>3.2. 扩展类中间件采用父类的加载</li><li>3.3. 中间件的key说明</li></ul></li></ol></li><li><ol start="4"><li>DownloaderMiddlewareManager（子）<ul><li>4.1. 首先看下程序启动时的打印代码 </li><li>4.2. DownloaderMiddleware加载源码</li><li>4.3. 中间件的key说明</li><li>4.4. 调用方式</li></ul></li></ol></li><li><ol start="5"><li>SpiderMiddlewareManager（子）<ul><li>5.1. 首先看下程序启动时的打印代码 </li><li>5.2. SpiderMiddleware加载源码</li><li>5.3. 中间件的key说明</li><li>5.4. 调用方式</li></ul></li></ol></li><li><ol start="6"><li>ItemPipelineManager（子）<ul><li>6.1. 首先看下程序启动时的打印代码 </li><li>6.2. ItemPipeline加载源码</li><li>6.3. 中间件的key说明</li><li>6.4. 调用方式</li></ul></li></ol></li></ul><!-- /TOC --><h2 id="1-General"><a href="#1-General" class="headerlink" title="1. General"></a>1. General</h2><h2 id="2-MiddlewareManager（父）"><a href="#2-MiddlewareManager（父）" class="headerlink" title="2. MiddlewareManager（父）"></a>2. MiddlewareManager（父）</h2><h3 id="2-1-MiddlewareManager-是中间件的抽象类，他的子类包括-以及代码中加载顺序"><a href="#2-1-MiddlewareManager-是中间件的抽象类，他的子类包括-以及代码中加载顺序" class="headerlink" title="2.1. MiddlewareManager 是中间件的抽象类，他的子类包括.以及代码中加载顺序"></a>2.1. MiddlewareManager 是中间件的抽象类，他的子类包括.以及代码中加载顺序</h3><blockquote><ul><li>ExtensionManager 扩展中间件 1</li><li>DownloaderMiddlewareManager 下载中间件 2</li><li>SpiderMiddlewareManager 爬虫中间件 3</li><li>ItemPipelineManager pipline中间件 4</li></ul></blockquote><h3 id="2-2-MiddlewareManager-初始化"><a href="#2-2-MiddlewareManager-初始化" class="headerlink" title="2.2. MiddlewareManager 初始化"></a>2.2. MiddlewareManager 初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def __init__(self, *middlewares):</span><br><span class="line">    # 所有的中间件</span><br><span class="line">    self.middlewares = middlewares</span><br><span class="line">    # 中间件存放的数据结构，map ,每一个map位是一个队列</span><br><span class="line">    self.methods = defaultdict(deque)</span><br><span class="line">    for mw in middlewares:</span><br><span class="line">        self._add_middleware(mw)</span><br></pre></td></tr></table></figure><h3 id="2-3-存储数据结构"><a href="#2-3-存储数据结构" class="headerlink" title="2.3. 存储数据结构"></a>2.3. 存储数据结构</h3><blockquote><ul><li>所有的中间件中重写的方法都会放在 self.methods = defaultdict(deque) 这个map</li><li>map的key做了分类，详细见每个中间件的key解释</li><li>中间件的顺序是排好序后 append，appendleft 来实现</li></ul></blockquote><h2 id="3-ExtensionManager（子）"><a href="#3-ExtensionManager（子）" class="headerlink" title="3. ExtensionManager（子）"></a>3. ExtensionManager（子）</h2><h3 id="3-1-首先看下程序启动时的打印代码"><a href="#3-1-首先看下程序启动时的打印代码" class="headerlink" title="3.1. 首先看下程序启动时的打印代码"></a>3.1. 首先看下程序启动时的打印代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2020-08-21 10:26:15 [scrapy.middleware] INFO: Enabled extensions:</span><br><span class="line">[&apos;scrapy.extensions.corestats.CoreStats&apos;, 核心统计收集器</span><br><span class="line"> &apos;scrapy.extensions.telnet.TelnetConsole&apos;, 监听控制台服务启动</span><br><span class="line"> &apos;scrapy.extensions.memusage.MemoryUsage&apos;,  监控内存做一些应急处理</span><br><span class="line"> &apos;scrapy.extensions.logstats.LogStats&apos;,  日志统计打印的</span><br><span class="line"> &apos;social_spider.middlewares.SpiderCallBackErrCount&apos;] 自定义收集器</span><br></pre></td></tr></table></figure><h3 id="3-2-扩展类中间件采用父类的加载"><a href="#3-2-扩展类中间件采用父类的加载" class="headerlink" title="3.2. 扩展类中间件采用父类的加载"></a>3.2. 扩展类中间件采用父类的加载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 实际上扩展类中间件并没有保存到字典，直接在 from_crawler 中做处理，通过信号注册</span><br><span class="line">def _add_middleware(self, mw):</span><br><span class="line">    if hasattr(mw, &apos;open_spider&apos;):</span><br><span class="line">        self.methods[&apos;open_spider&apos;].append(mw.open_spider)</span><br><span class="line">    if hasattr(mw, &apos;close_spider&apos;):</span><br><span class="line">        self.methods[&apos;close_spider&apos;].appendleft(mw.close_spider)</span><br></pre></td></tr></table></figure><h3 id="3-3-中间件的key说明"><a href="#3-3-中间件的key说明" class="headerlink" title="3.3. 中间件的key说明"></a>3.3. 中间件的key说明</h3><blockquote><p>open_spider<br>close_spider</p></blockquote><h2 id="4-DownloaderMiddlewareManager（子）"><a href="#4-DownloaderMiddlewareManager（子）" class="headerlink" title="4. DownloaderMiddlewareManager（子）"></a>4. DownloaderMiddlewareManager（子）</h2><h3 id="4-1-首先看下程序启动时的打印代码"><a href="#4-1-首先看下程序启动时的打印代码" class="headerlink" title="4.1. 首先看下程序启动时的打印代码"></a>4.1. 首先看下程序启动时的打印代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2020-08-21 10:29:00 [scrapy.middleware] INFO: Enabled downloader middlewares:</span><br><span class="line">[&apos;scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware&apos;,</span><br><span class="line"> &apos;scrapy.downloadermiddlewares.downloadtimeout.DownloadTimeoutMiddleware&apos;,</span><br><span class="line"> &apos;social_spider.middlewares.ProxyMiddleware&apos;,</span><br><span class="line"> &apos;scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware&apos;,</span><br><span class="line"> &apos;scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware&apos;,</span><br><span class="line"> &apos;scrapy.downloadermiddlewares.useragent.UserAgentMiddleware&apos;,</span><br><span class="line"> &apos;scrapy.downloadermiddlewares.retry.RetryMiddleware&apos;,</span><br><span class="line"> &apos;scrapy.downloadermiddlewares.redirect.MetaRefreshMiddleware&apos;,</span><br><span class="line"> &apos;scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware&apos;,</span><br><span class="line"> &apos;scrapy.downloadermiddlewares.redirect.RedirectMiddleware&apos;,</span><br><span class="line"> &apos;social_spider.middlewares.StatMiddleware&apos;,</span><br><span class="line"> &apos;scrapy.downloadermiddlewares.cookies.CookiesMiddleware&apos;,</span><br><span class="line"> &apos;scrapy.downloadermiddlewares.stats.DownloaderStats&apos;]</span><br></pre></td></tr></table></figure><h3 id="4-2-DownloaderMiddleware加载源码"><a href="#4-2-DownloaderMiddleware加载源码" class="headerlink" title="4.2. DownloaderMiddleware加载源码"></a>4.2. DownloaderMiddleware加载源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 重写函数，所有的 DOWNLOADER_MIDDLEWARES 都会保存到process_request，process_response，process_response， 看你重写了啥就保存啥</span><br><span class="line">def _add_middleware(self, mw):</span><br><span class="line">    if hasattr(mw, &apos;process_request&apos;):</span><br><span class="line">        self.methods[&apos;process_request&apos;].append(mw.process_request)</span><br><span class="line">    if hasattr(mw, &apos;process_response&apos;):</span><br><span class="line">        self.methods[&apos;process_response&apos;].appendleft(mw.process_response)</span><br><span class="line">    if hasattr(mw, &apos;process_exception&apos;):</span><br><span class="line">        self.methods[&apos;process_exception&apos;].appendleft(mw.process_exception)</span><br></pre></td></tr></table></figure><h3 id="4-3-中间件的key说明"><a href="#4-3-中间件的key说明" class="headerlink" title="4.3. 中间件的key说明"></a>4.3. 中间件的key说明</h3><blockquote><p>process_request<br>process_response<br>process_exception</p></blockquote><h3 id="4-4-调用方式"><a href="#4-4-调用方式" class="headerlink" title="4.4. 调用方式"></a>4.4. 调用方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">def download(self, download_func, request, spider):</span><br><span class="line">    @defer.inlineCallbacks</span><br><span class="line">    def process_request(request):</span><br><span class="line">        for method in self.methods[&apos;process_request&apos;]:</span><br><span class="line">            response = yield deferred_from_coro(method(request=request, spider=spider))</span><br><span class="line">            if response is not None and not isinstance(response, (Response, Request)):</span><br><span class="line">                raise _InvalidOutput(&apos;Middleware %s.process_request must return None, Response or Request, got %s&apos; % \</span><br><span class="line">                                      (method.__self__.__class__.__name__, response.__class__.__name__))</span><br><span class="line">            if response:</span><br><span class="line">                defer.returnValue(response)</span><br><span class="line">        defer.returnValue((yield download_func(request=request, spider=spider)))</span><br><span class="line"></span><br><span class="line">    @defer.inlineCallbacks</span><br><span class="line">    def process_response(response):</span><br><span class="line">        assert response is not None, &apos;Received None in process_response&apos;</span><br><span class="line">        if isinstance(response, Request):</span><br><span class="line">            defer.returnValue(response)</span><br><span class="line"></span><br><span class="line">        for method in self.methods[&apos;process_response&apos;]:</span><br><span class="line">            response = yield deferred_from_coro(method(request=request, response=response, spider=spider))</span><br><span class="line">            if not isinstance(response, (Response, Request)):</span><br><span class="line">                raise _InvalidOutput(&apos;Middleware %s.process_response must return Response or Request, got %s&apos; % \</span><br><span class="line">                                      (method.__self__.__class__.__name__, type(response)))</span><br><span class="line">            if isinstance(response, Request):</span><br><span class="line">                defer.returnValue(response)</span><br><span class="line">        defer.returnValue(response)</span><br><span class="line"></span><br><span class="line">    @defer.inlineCallbacks</span><br><span class="line">    def process_exception(_failure):</span><br><span class="line">        exception = _failure.value</span><br><span class="line">        for method in self.methods[&apos;process_exception&apos;]:</span><br><span class="line">            response = yield deferred_from_coro(method(request=request, exception=exception, spider=spider))</span><br><span class="line">            if response is not None and not isinstance(response, (Response, Request)):</span><br><span class="line">                raise _InvalidOutput(&apos;Middleware %s.process_exception must return None, Response or Request, got %s&apos; % \</span><br><span class="line">                                      (method.__self__.__class__.__name__, type(response)))</span><br><span class="line">            if response:</span><br><span class="line">                defer.returnValue(response)</span><br><span class="line">        defer.returnValue(_failure)</span><br><span class="line"></span><br><span class="line">    deferred = mustbe_deferred(process_request, request)</span><br><span class="line">    deferred.addErrback(process_exception)</span><br><span class="line">    deferred.addCallback(process_response)</span><br><span class="line">    return deferred</span><br></pre></td></tr></table></figure><h2 id="5-SpiderMiddlewareManager（子）"><a href="#5-SpiderMiddlewareManager（子）" class="headerlink" title="5. SpiderMiddlewareManager（子）"></a>5. SpiderMiddlewareManager（子）</h2><h3 id="5-1-首先看下程序启动时的打印代码"><a href="#5-1-首先看下程序启动时的打印代码" class="headerlink" title="5.1. 首先看下程序启动时的打印代码"></a>5.1. 首先看下程序启动时的打印代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2020-08-21 10:37:21 [scrapy.middleware] INFO: Enabled spider middlewares:</span><br><span class="line">[&apos;scrapy.spidermiddlewares.httperror.HttpErrorMiddleware&apos;,</span><br><span class="line"> &apos;scrapy.spidermiddlewares.offsite.OffsiteMiddleware&apos;,</span><br><span class="line"> &apos;scrapy.spidermiddlewares.referer.RefererMiddleware&apos;,</span><br><span class="line"> &apos;scrapy.spidermiddlewares.urllength.UrlLengthMiddleware&apos;,</span><br><span class="line"> &apos;scrapy.spidermiddlewares.depth.DepthMiddleware&apos;]</span><br></pre></td></tr></table></figure><h3 id="5-2-SpiderMiddleware加载源码"><a href="#5-2-SpiderMiddleware加载源码" class="headerlink" title="5.2. SpiderMiddleware加载源码"></a>5.2. SpiderMiddleware加载源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def _add_middleware(self, mw):</span><br><span class="line">    super(SpiderMiddlewareManager, self)._add_middleware(mw)</span><br><span class="line">    if hasattr(mw, &apos;process_spider_input&apos;):</span><br><span class="line">        self.methods[&apos;process_spider_input&apos;].append(mw.process_spider_input)</span><br><span class="line">    if hasattr(mw, &apos;process_start_requests&apos;):</span><br><span class="line">        self.methods[&apos;process_start_requests&apos;].appendleft(mw.process_start_requests)</span><br><span class="line">    process_spider_output = getattr(mw, &apos;process_spider_output&apos;, None)</span><br><span class="line">    self.methods[&apos;process_spider_output&apos;].appendleft(process_spider_output)</span><br><span class="line">    process_spider_exception = getattr(mw, &apos;process_spider_exception&apos;, None)</span><br><span class="line">    self.methods[&apos;process_spider_exception&apos;].appendleft(process_spider_exception)</span><br></pre></td></tr></table></figure><h3 id="5-3-中间件的key说明"><a href="#5-3-中间件的key说明" class="headerlink" title="5.3. 中间件的key说明"></a>5.3. 中间件的key说明</h3><blockquote><p>open_spider<br>close_spider<br>process_spider_input<br>process_start_requests<br>process_spider_output<br>process_spider_exception</p></blockquote><h3 id="5-4-调用方式"><a href="#5-4-调用方式" class="headerlink" title="5.4. 调用方式"></a>5.4. 调用方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def process_start_requests(self, start_requests, spider):</span><br><span class="line">    return self._process_chain(&apos;process_start_requests&apos;, start_requests, spider)</span><br></pre></td></tr></table></figure><h2 id="6-ItemPipelineManager（子）"><a href="#6-ItemPipelineManager（子）" class="headerlink" title="6. ItemPipelineManager（子）"></a>6. ItemPipelineManager（子）</h2><h3 id="6-1-首先看下程序启动时的打印代码"><a href="#6-1-首先看下程序启动时的打印代码" class="headerlink" title="6.1. 首先看下程序启动时的打印代码"></a>6.1. 首先看下程序启动时的打印代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-08-21 10:47:28 [scrapy.middleware] INFO: Enabled item pipelines:</span><br><span class="line">[&apos;social_spider.pipelines.PipelineKafka&apos;]</span><br></pre></td></tr></table></figure><h3 id="6-2-ItemPipeline加载源码"><a href="#6-2-ItemPipeline加载源码" class="headerlink" title="6.2. ItemPipeline加载源码"></a>6.2. ItemPipeline加载源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def _add_middleware(self, pipe):</span><br><span class="line">    super(ItemPipelineManager, self)._add_middleware(pipe)</span><br><span class="line">    if hasattr(pipe, &apos;process_item&apos;):</span><br><span class="line">        self.methods[&apos;process_item&apos;].append(deferred_f_from_coro_f(pipe.process_item))</span><br></pre></td></tr></table></figure><h3 id="6-3-中间件的key说明"><a href="#6-3-中间件的key说明" class="headerlink" title="6.3. 中间件的key说明"></a>6.3. 中间件的key说明</h3><blockquote><p>open_spider<br>close_spider<br>process_item</p></blockquote><h3 id="6-4-调用方式"><a href="#6-4-调用方式" class="headerlink" title="6.4. 调用方式"></a>6.4. 调用方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def process_item(self, item, spider):</span><br><span class="line">    return self._process_chain(&apos;process_item&apos;, item, spider)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;scrapy-中间件源码分析-3&quot;&gt;&lt;a href=&quot;#scrapy-中间件源码分析-3&quot; class=&quot;headerlink&quot; title=&quot;scrapy-中间件源码分析(3)&quot;&gt;&lt;/a&gt;scrapy-中间件源码分析(3)&lt;/h1&gt;&lt;!-- TOC --&gt;
&lt;u
      
    
    </summary>
    
      <category term="爬虫-scrapy" scheme="https://langgithub.github.io/categories/%E7%88%AC%E8%99%AB-scrapy/"/>
    
    
      <category term="scrapy" scheme="https://langgithub.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>scrapy-twisted分析</title>
    <link href="https://langgithub.github.io/2020/08/18/scrapy-twisted%E5%88%86%E6%9E%90(2)/"/>
    <id>https://langgithub.github.io/2020/08/18/scrapy-twisted分析(2)/</id>
    <published>2020-08-18T07:42:13.247Z</published>
    <updated>2020-08-18T12:15:39.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scrapy-twisted分析"><a href="#scrapy-twisted分析" class="headerlink" title="scrapy-twisted分析"></a>scrapy-twisted分析</h1><!-- TOC --><ul><li><ol><li>General</li></ol></li><li><ol start="2"><li>twisted异步框架<ul><li>2.1. reactor设计模式</li><li>2.2. Deferred延迟对象</li><li>2.3. @defer.inlineCallbacks的作用</li></ul></li></ol></li></ul><!-- /TOC --><h2 id="1-General"><a href="#1-General" class="headerlink" title="1. General"></a>1. General</h2><p>scrapy 底层采用异步网络框架twisted来实现的，这一章主要讲解reactor defferd defferList @defer.inlineCallbacks等一些列异步开发api在scrapy中的应用</p><h2 id="2-twisted异步框架"><a href="#2-twisted异步框架" class="headerlink" title="2. twisted异步框架"></a>2. twisted异步框架</h2><h3 id="2-1-reactor设计模式"><a href="#2-1-reactor设计模式" class="headerlink" title="2.1. reactor设计模式"></a>2.1. reactor设计模式</h3><p>暂时不做详细讲解，研究中</p><h3 id="2-2-Deferred延迟对象"><a href="#2-2-Deferred延迟对象" class="headerlink" title="2.2. Deferred延迟对象"></a>2.2. Deferred延迟对象</h3><p>API: <a href="https://twistedmatrix.com/documents/10.1.0/core/howto/defer.html" target="_blank" rel="noopener">https://twistedmatrix.com/documents/10.1.0/core/howto/defer.html</a></p><blockquote><ul><li>Deferred 底层数据结构是[tuple()],如<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def addCallbacks(self, callback, errback=None,</span><br><span class="line">                    callbackArgs=None, callbackKeywords=None,</span><br><span class="line">                    errbackArgs=None, errbackKeywords=None):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Add a pair of callbacks (success and error) to this L&#123;Deferred&#125;.</span><br><span class="line"></span><br><span class="line">    These will be executed when the &apos;master&apos; callback is run.</span><br><span class="line"></span><br><span class="line">    @return: C&#123;self&#125;.</span><br><span class="line">    @rtype: a L&#123;Deferred&#125;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    assert callable(callback)</span><br><span class="line">    assert errback is None or callable(errback)</span><br><span class="line">    cbs = ((callback, callbackArgs, callbackKeywords),</span><br><span class="line">            (errback or (passthru), errbackArgs, errbackKeywords))</span><br><span class="line">    self.callbacks.append(cbs)</span><br><span class="line"></span><br><span class="line">    if self.called:</span><br><span class="line">        self._runCallbacks()</span><br><span class="line">    return self</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>addCallbacks是核心,向callbacks连表添加回调对象。addCallback-&gt;tuple(callback,passthru)，addErrback-&gt;(passthru,errback)，addBoth-&gt;(callback,errback)都会调用addCallbacks。只是addCallbacks中参数不一样.来看下_runCallbacks函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 核心逻辑</span><br><span class="line">def _runCallbacks(self):</span><br><span class="line">    ...忽略...</span><br><span class="line">    # 此处的self 是defferList连表</span><br><span class="line">    chain = [self]</span><br><span class="line">    while chain:</span><br><span class="line">        # 把list当作栈来使用 ，取出一个defferd对象</span><br><span class="line">        current = chain[-1]</span><br><span class="line">        ...忽略...</span><br><span class="line">        while current.callbacks:</span><br><span class="line">            # 获取其中的callbacks 列表</span><br><span class="line">            item = current.callbacks.pop(0)</span><br><span class="line">            callback, args, kw = item[</span><br><span class="line">                isinstance(current.result, failure.Failure)]</span><br><span class="line">            args = args or ()</span><br><span class="line">            kw = kw or &#123;&#125;</span><br><span class="line">            try:</span><br><span class="line">                current._runningCallbacks = True</span><br><span class="line">                try:</span><br><span class="line">                    # callback回调，传入上一次回调结果，保存当前结果</span><br><span class="line">                    current.result = callback(current.result, *args, **kw)</span><br><span class="line">                    ...忽略...</span><br><span class="line">                finally:</span><br><span class="line">                    current._runningCallbacks = False</span><br><span class="line">            except:</span><br><span class="line">                ...忽略...</span><br><span class="line">            else:</span><br><span class="line">                ...忽略...</span><br><span class="line">        if finished:</span><br><span class="line">            ...忽略...</span><br><span class="line">            # defferd完成，移除[-1]最后一个对象</span><br><span class="line">            chain.pop()</span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="2-3-defer-inlineCallbacks的作用"><a href="#2-3-defer-inlineCallbacks的作用" class="headerlink" title="2.3. @defer.inlineCallbacks的作用"></a>2.3. @defer.inlineCallbacks的作用</h3><blockquote><p>@defer.inlineCallbacks封装成一个defferd对象然后返回，避免写defferd，callback。调用时启动生成器，判断返回内容是否是defferd对象，如果是继续递归调用当前方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">@failure._extraneous</span><br><span class="line">def _inlineCallbacks(result, g, status):</span><br><span class="line">    waiting = [True, # waiting for result?</span><br><span class="line">               None] # result</span><br><span class="line"></span><br><span class="line">    while 1:</span><br><span class="line">        try:</span><br><span class="line">            # Send the last result back as the result of the yield expression.</span><br><span class="line">            isFailure = isinstance(result, failure.Failure)</span><br><span class="line">            if isFailure:</span><br><span class="line">                result = result.throwExceptionIntoGenerator(g)</span><br><span class="line">            else:</span><br><span class="line">                result = g.send(result)</span><br><span class="line">        except StopIteration as e:</span><br><span class="line">            # fell off the end, or &quot;return&quot; statement</span><br><span class="line">            status.deferred.callback(getattr(e, &quot;value&quot;, None))</span><br><span class="line">            return</span><br><span class="line">        except _DefGen_Return as e:</span><br><span class="line">            ...忽略...</span><br><span class="line">        except:</span><br><span class="line">            status.deferred.errback()</span><br><span class="line">            return</span><br><span class="line">        # 如果是defferd对象，递归调用</span><br><span class="line">        if isinstance(result, Deferred):</span><br><span class="line">            # a deferred was yielded, get the result.</span><br><span class="line">            def gotResult(r):</span><br><span class="line">                if waiting[0]:</span><br><span class="line">                    waiting[0] = False</span><br><span class="line">                    waiting[1] = r</span><br><span class="line">                else:</span><br><span class="line">                    # We are not waiting for deferred result any more</span><br><span class="line">                    _inlineCallbacks(r, g, status)</span><br><span class="line"></span><br><span class="line">            result.addBoth(gotResult)</span><br><span class="line">            if waiting[0]:</span><br><span class="line">                # Haven&apos;t called back yet, set flag so that we get reinvoked</span><br><span class="line">                # and return from the loop</span><br><span class="line">                waiting[0] = False</span><br><span class="line">                status.waitingOn = result</span><br><span class="line">                return</span><br><span class="line"></span><br><span class="line">            result = waiting[1]</span><br><span class="line"></span><br><span class="line">            waiting[0] = True</span><br><span class="line">            waiting[1] = None</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;scrapy-twisted分析&quot;&gt;&lt;a href=&quot;#scrapy-twisted分析&quot; class=&quot;headerlink&quot; title=&quot;scrapy-twisted分析&quot;&gt;&lt;/a&gt;scrapy-twisted分析&lt;/h1&gt;&lt;!-- TOC --&gt;
&lt;ul&gt;
      
    
    </summary>
    
      <category term="爬虫-scrapy" scheme="https://langgithub.github.io/categories/%E7%88%AC%E8%99%AB-scrapy/"/>
    
    
      <category term="scrapy" scheme="https://langgithub.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>链表相关题</title>
    <link href="https://langgithub.github.io/2020/06/09/%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3%E9%A2%98/"/>
    <id>https://langgithub.github.io/2020/06/09/链表相关题/</id>
    <published>2020-06-09T09:29:21.397Z</published>
    <updated>2020-06-09T09:29:21.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-链表反转"><a href="#1-链表反转" class="headerlink" title="1.链表反转"></a>1.链表反转</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Node():</span><br><span class="line">    def __init__(slef,data):</span><br><span class="line">        self.next=None</span><br><span class="line">        self.data=data</span><br><span class="line"></span><br><span class="line"># 方法一</span><br><span class="line">def reverse(head):</span><br><span class="line">    if head.next is None:</span><br><span class="line">        return head</span><br><span class="line"></span><br><span class="line">    next=head.next</span><br><span class="line">    head.next=None</span><br><span class="line">    current_next=revers(next)</span><br><span class="line">    next.next=head</span><br><span class="line">    return current_next</span><br><span class="line"></span><br><span class="line"># 方法二</span><br><span class="line">def swap_reverse(head):</span><br><span class="line">    cur,prev=head,None</span><br><span class="line">    while cur:</span><br><span class="line">        cur.next,prev,cur=prev,cur,cur.next</span><br><span class="line">    return prev</span><br></pre></td></tr></table></figure><h1 id="两两交换链表中的节点"><a href="#两两交换链表中的节点" class="headerlink" title="两两交换链表中的节点"></a>两两交换链表中的节点</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># class ListNode(object):</span><br><span class="line">#     def __init__(self, x):</span><br><span class="line">#         self.val = x</span><br><span class="line">#         self.next = None</span><br><span class="line"></span><br><span class="line">class Solution(object):</span><br><span class="line">    def swapPairs(self, head):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">       if head is None or head.next is None : return head</span><br><span class="line">       next = head.next</span><br><span class="line">       head.next=self.swapPairs(next.next)</span><br><span class="line">       next.next=head</span><br><span class="line">       return next</span><br></pre></td></tr></table></figure><h1 id="3-判断链表是否有环"><a href="#3-判断链表是否有环" class="headerlink" title="3.判断链表是否有环"></a>3.判断链表是否有环</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 正常思维</span><br><span class="line">item = set()</span><br><span class="line">class Solution(object):</span><br><span class="line"></span><br><span class="line">    def hasCycle(self, head):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: bool</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        global item</span><br><span class="line">        if head is None or head.next is None:</span><br><span class="line">            return False</span><br><span class="line">        a = item &amp; &#123;head&#125;</span><br><span class="line">        if len(a) != 0:</span><br><span class="line">            return True</span><br><span class="line">        else:</span><br><span class="line">            item.update(&#123;head&#125;)</span><br><span class="line">            return self.hasCycle(head.next)</span><br><span class="line"># 龟兔赛跑</span><br><span class="line">class Solution(object):</span><br><span class="line"></span><br><span class="line">    def hasCycle(self, head):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: bool</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        fast,slow=head,head</span><br><span class="line">        while fast and fast.next and fast.next.next:</span><br><span class="line">            slow,fast=slow.next,fast.next.next</span><br><span class="line">            if slow==fast:</span><br><span class="line">                return True     </span><br><span class="line">        return False</span><br></pre></td></tr></table></figure><h1 id="2-链表合并"><a href="#2-链表合并" class="headerlink" title="2.链表合并"></a>2.链表合并</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Node():</span><br><span class="line">    def __init__(slef,data):</span><br><span class="line">        self.next=None</span><br><span class="line">        self.data=data</span><br><span class="line"></span><br><span class="line">def merge(head1,head2):</span><br><span class="line">    if head1 is None:</span><br><span class="line">        return head2</span><br><span class="line">    if head2 is None:</span><br><span class="line">        return head1</span><br><span class="line">    if head1.data&lt;=head2.data:</span><br><span class="line">        head1.next=merge(head1.next,head2)</span><br><span class="line">        return head1</span><br><span class="line">    else:</span><br><span class="line">        head2.next=merger(head1,head2.next)</span><br><span class="line">        return head2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-链表反转&quot;&gt;&lt;a href=&quot;#1-链表反转&quot; class=&quot;headerlink&quot; title=&quot;1.链表反转&quot;&gt;&lt;/a&gt;1.链表反转&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="面试" scheme="https://langgithub.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="算法" scheme="https://langgithub.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法</title>
    <link href="https://langgithub.github.io/2020/06/09/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>https://langgithub.github.io/2020/06/09/贪心算法/</id>
    <published>2020-06-09T09:29:21.396Z</published>
    <updated>2020-06-09T09:29:21.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="贪心算法-所有贪心算法题移步动态规划"><a href="#贪心算法-所有贪心算法题移步动态规划" class="headerlink" title="贪心算法  所有贪心算法题移步动态规划"></a>贪心算法  所有贪心算法题移步动态规划</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;贪心算法-所有贪心算法题移步动态规划&quot;&gt;&lt;a href=&quot;#贪心算法-所有贪心算法题移步动态规划&quot; class=&quot;headerlink&quot; title=&quot;贪心算法  所有贪心算法题移步动态规划&quot;&gt;&lt;/a&gt;贪心算法  所有贪心算法题移步动态规划&lt;/h1&gt;
      
    
    </summary>
    
      <category term="算法-数据结构" scheme="https://langgithub.github.io/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://langgithub.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络原理</title>
    <link href="https://langgithub.github.io/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"/>
    <id>https://langgithub.github.io/2020/06/09/计算机网络原理/</id>
    <published>2020-06-09T09:29:21.396Z</published>
    <updated>2020-06-09T09:29:21.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络原理"><a href="#计算机网络原理" class="headerlink" title="计算机网络原理"></a>计算机网络原理</h1><ol><li>物理层（比特传输）集线器<br> 1.1 通讯方式<pre><code>单工，半双工，全双工</code></pre></li><li>数据链路层（交换机）<br> 2.1 解决问题<pre><code>封装成帧透明传输差错检测</code></pre> 2.2 信道分类<pre><code>广播信道 （CSMA/CD协议）{多点接入，载波监听，碰撞检测} =》2T点对点信道 （ppp协议）PPP 协议是用户计算机和 ISP进行通信时所使用的数据链路层协议。</code></pre> 2.3 信道复用技术<pre><code>频分复用时分复用统计时分复用波分复用码分复用</code></pre></li><li>网络层<br> 3.1 网络分类<br><img src="https://wx1.sinaimg.cn/mw690/005EpKr8ly1g3y5qbaxcwj30u00minbw.jpg" alt="网络分类"><br> 3.2 相关协议<pre><code>ARP （mac地址解析协议 ip-mac）ICMPIGMPIP</code></pre> 3.3 路由分组转发</li><li>传输层<br> 4.1 UDP与TCP<br> 4.2 TCP三次握手<br> <img src="https://wx2.sinaimg.cn/mw690/005EpKr8ly1g3y8b6fqmzj30i40bd750.jpg" alt="TCP三次握手"><br> 4.3 TCP四次挥手<br> <img src="https://wx2.sinaimg.cn/mw690/005EpKr8ly1g3y8b6g2zmj30ik0cvab9.jpg" alt="TCP四次挥手"><br> 4.4 TCP滑动窗口</li><li>应用层<br> DNS 53<br> FTP 20 21<br> smtp 25 发送    pop3 imap 读取<br> telnet 23<br> http 80</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;计算机网络原理&quot;&gt;&lt;a href=&quot;#计算机网络原理&quot; class=&quot;headerlink&quot; title=&quot;计算机网络原理&quot;&gt;&lt;/a&gt;计算机网络原理&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;物理层（比特传输）集线器&lt;br&gt; 1.1 通讯方式&lt;pre&gt;&lt;code&gt;单工，半双工，全
      
    
    </summary>
    
      <category term="面试" scheme="https://langgithub.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="计算机网络原理" scheme="https://langgithub.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>递归算法</title>
    <link href="https://langgithub.github.io/2020/06/09/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/"/>
    <id>https://langgithub.github.io/2020/06/09/递归算法/</id>
    <published>2020-06-09T09:29:21.396Z</published>
    <updated>2020-06-09T09:29:21.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现pow函数-分治递归"><a href="#实现pow函数-分治递归" class="headerlink" title="实现pow函数 (分治递归)"></a>实现pow函数 (分治递归)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def myPow(self, x, n):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type x: float</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: float</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        </span><br><span class="line">        if n&lt;0:</span><br><span class="line">            return 1/self.my_pow(x,-n)</span><br><span class="line">        else:</span><br><span class="line">            return self.my_pow(x,n)</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    def my_pow(self,x,y):</span><br><span class="line">        if y==0: return 1</span><br><span class="line">        if y==1: return x</span><br><span class="line">        if y%2==0:</span><br><span class="line">            n=y/2</span><br><span class="line">            return self.my_pow(x, n)*self.my_pow(x, n)</span><br><span class="line">        else:</span><br><span class="line">            n=(y-1)/2</span><br><span class="line">            return self.my_pow(x, n) * self.my_pow(x, n)*x</span><br></pre></td></tr></table></figure><h1 id="括号生成-（递归，树的深度遍历，剪枝）"><a href="#括号生成-（递归，树的深度遍历，剪枝）" class="headerlink" title="括号生成 （递归，树的深度遍历，剪枝）"></a>括号生成 （递归，树的深度遍历，剪枝）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def generateParenthesis(self, n):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: List[str]</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self.res=[]</span><br><span class="line">        self._gen(&quot;&quot;,n,n)</span><br><span class="line">        return self.res</span><br><span class="line">    </span><br><span class="line">    def _gen(self,s_kuo,left,right):</span><br><span class="line">        if left==0 and right==0:</span><br><span class="line">            self.res.append(s_kuo)  </span><br><span class="line">        if left&gt;0:</span><br><span class="line">            self._gen(s_kuo+&quot;(&quot;,left-1,right)</span><br><span class="line">        if right&gt;left:</span><br><span class="line">            self._gen(s_kuo+&quot;)&quot;,left,right-1)</span><br></pre></td></tr></table></figure><h1 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def solveNQueens(self, n):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        坐标逆时针旋转90度理解p+q ,p-q</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: List[List[str]]</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        def DFS(cols,pie,na):</span><br><span class="line">            p=len(cols)</span><br><span class="line">            if p&gt;=n:</span><br><span class="line">                result.append(cols)</span><br><span class="line">                return None</span><br><span class="line">            for q in range(n):</span><br><span class="line">                if q not in cols and p-q not in pie and p+q not in na:</span><br><span class="line">                    DFS(cols+[q],pie+[p-q],na+[p+q])</span><br><span class="line">        result=[]</span><br><span class="line">        DFS([],[],[])</span><br><span class="line">        return [[ &apos;.&apos;*i+&apos;Q&apos;+&apos;.&apos;*(n-1-i) for i in cols] for cols in result]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实现pow函数-分治递归&quot;&gt;&lt;a href=&quot;#实现pow函数-分治递归&quot; class=&quot;headerlink&quot; title=&quot;实现pow函数 (分治递归)&quot;&gt;&lt;/a&gt;实现pow函数 (分治递归)&lt;/h1&gt;&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
      <category term="算法-数据结构" scheme="https://langgithub.github.io/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://langgithub.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>逆向-ARM指令</title>
    <link href="https://langgithub.github.io/2020/06/09/%E9%80%86%E5%90%91-ARM%E6%8C%87%E4%BB%A4/"/>
    <id>https://langgithub.github.io/2020/06/09/逆向-ARM指令/</id>
    <published>2020-06-09T09:29:21.396Z</published>
    <updated>2020-06-09T09:29:21.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ARM指令"><a href="#ARM指令" class="headerlink" title="ARM指令"></a>ARM指令</h1><h3 id="用户模式"><a href="#用户模式" class="headerlink" title="用户模式"></a>用户模式</h3><ol><li>不分组寄存器（R0-R7）</li><li>分组寄存器（R8-R14）</li><li>程序计数器pc（R15）</li><li>状态寄存器CPSR</li></ol><h3 id="ARM处理器"><a href="#ARM处理器" class="headerlink" title="ARM处理器"></a>ARM处理器</h3><ol><li>ARM状态（32位对齐指令的ARM指令）</li><li>Thumb状态（16位对齐指令的Thump指令）</li></ol><h3 id="ARM指令集"><a href="#ARM指令集" class="headerlink" title="ARM指令集"></a>ARM指令集</h3><ol><li><p>跳转指令</p><ul><li>B 无条件跳转</li><li>BL 带链接的无条件跳转</li><li>BX 带状态切换的无条件跳转</li><li>BLX 带链接和状态的无条件跳转</li><li>B loc_地址</li><li>BNE 不相等跳转地址；BEQ 相等跳转地址</li></ul></li><li><p>存储器和寄存器交互数据指令</p><ul><li>存储器（主存，内存）</li><li><p>寄存器中的数据（字符串，数，地址，各种类型数据）</p></li><li><p>LDR 从存储器中加载数据到寄存器 &lt;- load</p></li><li><p>LDR R8,[R9,#04] R8为寄存器，加载值为R9+#04所指向的存储单元</p></li><li><p>STR 将寄存器的数据加载到存储器 -&gt; store</p></li><li><p>STR R8,[R9,#04] 将R8寄存器中数据存储到R9+#04所指向的存储单元</p></li><li><p>LDM 将存储器的数据加载到一个寄存器列表 -&gt;</p></li><li><p>LDM R0, {R1-R3} 将R0指向的存储单元的数据依次加载到R1,R2,R3寄存器</p></li><li><p>STM 将一个寄存器列表的数据存储到指定存储器 &lt;-</p></li><li><p>PUSH 将寄存器值推入堆栈</p></li><li><p>POP 将堆栈的值推出到寄存器</p></li><li><p>SWP 将寄存器与存储器之间的数据进行交换</p></li><li>SWP R1，R1 [R0] 将R1寄存器与R0指向存储单元内容进行交换</li></ul></li><li><p>数据传送指令</p><ul><li>MOV 立即数或寄存器的数据数据传送到目标寄存器</li><li>MOV R0,#8 R0=#8</li></ul></li><li><p>数据算术运算指令</p><ul><li>ADD,SUB,MUL,DIV</li><li>有符号，无符号运算，带进位运算</li></ul></li><li><p>数据逻辑运算指令</p><ul><li>与 ADD</li><li>或 ORR</li><li>异或 EOR</li><li>LSL 逻辑左移</li><li><p>LSR 逻辑右移</p></li><li><p>LSL R0，R1，#2   R0=R1*2</p></li></ul></li><li><p>比较指令</p><ul><li>CMP </li><li>CMP R0 #0   R0寄存器中值与0比较</li><li>标志位</li></ul></li><li><p>其他指令</p><ul><li>伪处理器指令 SWT （切换用户模式）</li><li>伪指令 DCB</li></ul></li><li><p>寄存器寻址指令</p><ul><li>7种，常见的5种</li><li>立即寻址 MOV R0,#1234</li><li>寄存器寻址 MOV R0 , R1</li><li>寄存器移位寻址 MOV R0, R1,LSL #2  R0=R1*4</li><li>寄存器间接寻址 LDR R0 ,[R1] R1寄存器值作为地址赋R0</li><li>寄存器间接基址偏移寻址 LDR R0,[R1,#-4]将R1寄存家的值-0x4作为地址，取出地址中的值赋R0</li></ul></li></ol><h3 id="ARM-指令收集"><a href="#ARM-指令收集" class="headerlink" title="ARM 指令收集"></a>ARM 指令收集</h3><ol><li><p>—SUB指令—</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">减法指令SUB (SUBtract) </span><br><span class="line">格式: SUB A,B //A=A-B;</span><br><span class="line">功能: 两个操作数的相减,即从A中减去B,其结果放在A中.</span><br></pre></td></tr></table></figure></li><li><p>—CMP指令—</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">比较指令CMP</span><br><span class="line">格式: CMP A,B //  A-B;</span><br><span class="line">功能: 两个操作数的相减,即从A中减去B，其结果会影响标志位， 对标志位的影响与SUB指令相同。本条指令主要是用于配合条件转移指令使用。如JZ ZF=0时，跳转</span><br></pre></td></tr></table></figure></li><li><p>—条件转移指令 JE/JZ— </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式: JE/JZ标号 //等于跳转</span><br><span class="line">功能: ZF＝1,转到指定地址执行</span><br><span class="line">说明:</span><br><span class="line">1. 指令JE与JZ等价,它们是根据标志位ZF进行转移的指令</span><br><span class="line">2. JE,JZ均为一条指令的两种助记符表示方法</span><br></pre></td></tr></table></figure></li><li><p>—str指令—</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">格式:str&#123;条件&#125;  源寄存器，&lt;存储器地址&gt;</span><br><span class="line">功能:将源寄存器中数据存到存储器地址中 </span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">str  r1,[r2]        ; 将r1中的值存到r2所指定的地址中</span><br><span class="line">str  r1,[r2,#4]     ;将r1中的值存到r2+4所指定的地址中</span><br><span class="line">str  r1,[r2],#4     ;将r1中的值存到r2所指定的地址中, 同时r2=r2+4</span><br></pre></td></tr></table></figure></li><li><p>—LDR LDM指令—</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">A.LDR加载指令 从右往左</span><br><span class="line">格式为:LDR&#123;条件&#125;  目的寄存器，&lt;存储器地址&gt;</span><br><span class="line">功能:LDR指令用亍从存储器中将一个32位的字数据传送到目的寄存器中</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">ldr r0，[r1]                ；将存储器地址为R1的字数据读入寄存器R0。</span><br><span class="line">ldr r0，[r1，r2]            ；将存储器地址为R1+R2的字数据读入寄存器R0。</span><br><span class="line">ldr r0，[r1，＃8]           ；将存储器地址为R1+8的字数据读入寄存器R0。</span><br><span class="line">ldr r0，[r1，r2]！          ；将存储器地址为R1+R2的字数据读入寄存器R0,幵将新地址R1＋R2写入R1。</span><br><span class="line">ldr r0，[r1，＃8]！         ；将存储器地址为R1+8的字数据读入寄存器R0，幵将新地址R1＋8写入R1。 </span><br><span class="line">ldr r0，[r1]，r2            ；将存储器地址为R1的字数据读入寄存器R0，幵将新地址R1＋R2写入R1。</span><br><span class="line">ldr r0，[r1，r2，lsl＃2]！  ；将存储器地址为R1＋R2×4的字数据读入寄存器R0，并将新地址R1＋R2×4写入R1。</span><br><span class="line">ldr r0，[r1]，r2，lsL＃2    ；将存储器地址为R1的字数据读入寄存器R0，幵将新地址R1＋R2×4写入R1。”</span><br><span class="line">B.伪指令</span><br><span class="line">格式:LDR&#123;条件&#125;  目的寄存器，&lt;存储器地址&gt;</span><br><span class="line">功能:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">说明:将COUNT的值赋给R0</span><br><span class="line">LDR       R1,=COUNT</span><br><span class="line">LDR       R0,[R1]</span><br><span class="line">LDR       R1,=COUNT这条伪指令，是怎样完成将COUNT的地址赋给R1，有兴趣的可以看它编译后的结果。这条指令实际上会编译成一条LDR指令和一条DCD伪指令。</span><br><span class="line"></span><br><span class="line">B.LDM记载指令</span><br><span class="line">从左往右</span><br></pre></td></tr></table></figure></li><li><p>—B,BL,BX,BLX 指令—</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">A.B跳转指令</span><br><span class="line">格式:B  addr</span><br><span class="line">功能:跳转指令B使程序跳转到指定的地址执行程序。</span><br><span class="line">说明:</span><br><span class="line">B  0x1234   ;跳转到绝对地址0x1234处。</span><br><span class="line"></span><br><span class="line">B.BL带返回的连接跳转</span><br><span class="line">格式:</span><br><span class="line">功能:BL指令用于实现子程序调用。子程序的返回可通过将LR寄存器的值复制到PC寄存器来实现。下面的指令可实现子程序返回：(1)、BX   R14   (2)、MOV   PC,R14</span><br><span class="line">说明:</span><br><span class="line">BL func    ;跳转到子程序func处执行，同时将当前pc值保存到LR中。</span><br><span class="line"></span><br><span class="line">C.BX跳转并切换状态</span><br><span class="line">格式:BX&#123;&lt;cond&gt;&#125;    &lt;Rm&gt;</span><br><span class="line">功能:带状态切换的跳转指令BX使程序跳转到指令中指定的参数Rm指定的地址执行程序。若 Rm 的 bit[0] 为1，切换到 Thumb 指令执行；若 Rm 的 bit[0] 为0，切换到 ARM 指令执行。</span><br><span class="line">说明:</span><br><span class="line">BX   R0    ;跳转到R0中的地址，如果R0[0]=1，则进入Thumb状态。</span><br><span class="line"></span><br><span class="line">D.BLX带返回的跳转并切换状态</span><br><span class="line">格式:</span><br><span class="line">功能:该指令为无条件执行指令</span><br></pre></td></tr></table></figure></li><li><p>—BEQ BNE指令—</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a.BEQ指令</span><br><span class="line">格式: BEQ </span><br><span class="line">功能: 相等跳转</span><br><span class="line"></span><br><span class="line">b.BNE指令</span><br><span class="line">格式: BNE</span><br><span class="line">功能: 不想等跳转</span><br></pre></td></tr></table></figure></li><li><p>——-.w——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代表32位</span><br></pre></td></tr></table></figure></li><li><p>——CHP——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比较指令</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ARM指令&quot;&gt;&lt;a href=&quot;#ARM指令&quot; class=&quot;headerlink&quot; title=&quot;ARM指令&quot;&gt;&lt;/a&gt;ARM指令&lt;/h1&gt;&lt;h3 id=&quot;用户模式&quot;&gt;&lt;a href=&quot;#用户模式&quot; class=&quot;headerlink&quot; title=&quot;用户模式&quot;
      
    
    </summary>
    
      <category term="爬虫-Android逆向" scheme="https://langgithub.github.io/categories/%E7%88%AC%E8%99%AB-Android%E9%80%86%E5%90%91/"/>
    
    
      <category term="ARM" scheme="https://langgithub.github.io/tags/ARM/"/>
    
  </entry>
  
  <entry>
    <title>scrapy-项目介绍(1)</title>
    <link href="https://langgithub.github.io/2020/06/09/scrapy-%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D(1)/"/>
    <id>https://langgithub.github.io/2020/06/09/scrapy-项目介绍(1)/</id>
    <published>2020-06-09T09:29:21.395Z</published>
    <updated>2020-08-18T07:41:32.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scrapy项目介绍"><a href="#scrapy项目介绍" class="headerlink" title="scrapy项目介绍"></a>scrapy项目介绍</h1><!-- TOC --><ul><li><ol><li>General</li></ol></li><li><ol start="2"><li>项目基本使用</li></ol></li><li><ol start="3"><li>scrapy整体介绍<ul><li>3.1. scrapy组件</li><li>3.2. scrapy组件总结</li></ul></li></ol></li><li><ol start="4"><li>scrapy启动<ul><li>4.1. Crawler-命令执行入口</li><li>4.2. Crawler.crawl 分析</li><li>4.3. ExecutionEngine.open_spider分析</li></ul></li></ol></li><li><ol start="5"><li>总结</li></ol></li></ul><!-- /TOC --><h2 id="1-General"><a href="#1-General" class="headerlink" title="1. General"></a>1. General</h2><blockquote><p>scrapy是底层采用twsited基于事件驱动模型的通讯框架来实现，包含Engine，Scheduler，Spider，Downloader，Pipline五大部分组成</p></blockquote><h2 id="2-项目基本使用"><a href="#2-项目基本使用" class="headerlink" title="2. 项目基本使用"></a>2. 项目基本使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">api: https://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/tutorial.html</span><br><span class="line">scrapy startproject doubanmovie</span><br><span class="line">cd doubanmovie</span><br><span class="line">scrapy genspider movie duoban.com</span><br></pre></td></tr></table></figure><h2 id="3-scrapy整体介绍"><a href="#3-scrapy整体介绍" class="headerlink" title="3. scrapy整体介绍"></a>3. scrapy整体介绍</h2><blockquote><p><img src="/img/scrapy架构图.png" alt="scrapy架构图"></p></blockquote><h3 id="3-1-scrapy组件"><a href="#3-1-scrapy组件" class="headerlink" title="3.1. scrapy组件"></a>3.1. scrapy组件</h3><blockquote><ol><li>Spiders -&gt; 用户自己编写的爬虫脚本，可自定义抓取意图</li><li>pipline -&gt; 负责输出结构化数据，可自定义输出位置</li><li>Scheduler -&gt; 负责管理任务、过滤任务、输出任务的调度器，存储、去重任务都在此控制</li><li>Downloader -&gt; 下载器，负责在网络上下载网页数据，输入待下载URL，输出下载结果</li><li>Scrapy Engine -&gt; 核心引擎，负责控制和调度各个组件，保证数据流转</li><li>Downloader middlewares -&gt; 介于引擎和下载器之间，可以在网页在下载前、后进行逻辑处理</li><li>Spider middlewares -&gt; 介于引擎和爬虫之间，可以在调用爬虫输入下载结果和输出请求/数据时进行逻辑</li></ol></blockquote><h3 id="3-2-scrapy组件总结"><a href="#3-2-scrapy组件总结" class="headerlink" title="3.2. scrapy组件总结"></a>3.2. scrapy组件总结</h3><blockquote><ol><li>scrapy Engine启动调度Scheduler获取url种子</li><li>Engine将种子传递给download下载返回response</li><li>Engine将response传递给spider解析</li><li>Engine将解析回来的scrapy Item传递给pipline<br>其中在2中种子传递用Downloader middlewares进一步封装。</li></ol></blockquote><h2 id="4-scrapy启动"><a href="#4-scrapy启动" class="headerlink" title="4. scrapy启动"></a>4. scrapy启动</h2><h3 id="4-1-Crawler-命令执行入口"><a href="#4-1-Crawler-命令执行入口" class="headerlink" title="4.1. Crawler-命令执行入口"></a>4.1. Crawler-命令执行入口</h3><blockquote><ol><li>位于./python3.6/site-packages/scrapy/commands/crawl.py 中Command(ScrapyCommand) 是对scrapy命令解析执行. 调用逻辑run-&gt;self.crawler_process.crawl(spname, **opts.spargs)-&gt;self.crawler_process.start()。我们来看下crawler_process，该对象是在./python3.6/site-packages/scrapy/cmdline.py 中144行创建cmd.crawler_process = CrawlerProcess(settings)</li></ol></blockquote><blockquote><ol start="2"><li>接着看CrawlerProcess, 这理解之前先看下CrawlerProcess CrawlerRunner Crawler 三者的关系；首先从这里 class CrawlerProcess(CrawlerRunner) 看出CrawlerProcess继承CrawlerRunner，CrawlerRunner中的_create_crawler可以创建Crawler对象。而Crawler对象是加载全局配置文件Setting.py和爬虫文件的。   总结：./python3.6/site-packages/scrapy/commands/crawl.py 是解析scrapy命令的，第一步self.crawler_process.crawl(spname, **opts.spargs) 返回延迟对象，等待reactor轮询。第二部self.crawler_process.start() 启动轮询</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># CrawlerProcess函数说明</span><br><span class="line">class CrawlerProcess(CrawlerRunner):</span><br><span class="line">    # 操作系统信号量回调函数注册（也就是ctrl+c 后调用的函数）</span><br><span class="line">    def __init__(self, settings=None, install_root_handler=True):...</span><br><span class="line">    # 信号量回调函数，ctrl+c结束当前进程，优雅的退出进程</span><br><span class="line">    def _signal_shutdown(self, signum, _):...</span><br><span class="line">    # 如果一次ctrl+c没有退出，则会触发当前操作，强制退出</span><br><span class="line">    def _signal_kill(self, signum, _):...</span><br><span class="line">    # 进程启动(thradpool配置，操作系统事件注册)</span><br><span class="line">    def start(self, stop_after_crawl=True):...</span><br><span class="line">    # 优雅退出，将退出添加到callback调用链条</span><br><span class="line">    def _graceful_stop_reactor(self):...</span><br><span class="line">    # 强制退出，直接退出reactor.stop()</span><br><span class="line">    def _stop_reactor(self, _=None):...</span><br></pre></td></tr></table></figure><h3 id="4-2-Crawler-crawl-分析"><a href="#4-2-Crawler-crawl-分析" class="headerlink" title="4.2. Crawler.crawl 分析"></a>4.2. Crawler.crawl 分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@defer.inlineCallbacks</span><br><span class="line">def crawl(self, *args, **kwargs):</span><br><span class="line">    assert not self.crawling, &quot;Crawling already taking place&quot;</span><br><span class="line">    self.crawling = True</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        # 加载自己写的Spieder</span><br><span class="line">        self.spider = self._create_spider(*args, **kwargs)</span><br><span class="line">        # 加载 ExecutionEngine 引擎</span><br><span class="line">        self.engine = self._create_engine()</span><br><span class="line">        # 自己写的start_requests会被执行，没有就走父类默认的start_requests </span><br><span class="line">        # 位于./python3.6/site-packages/scrapy/spiders/__init__.py</span><br><span class="line">        start_requests = iter(self.spider.start_requests())</span><br><span class="line">        # 启动引擎</span><br><span class="line">        yield self.engine.open_spider(self.spider, start_requests)</span><br><span class="line">        # 启动接受控制台命令</span><br><span class="line">        yield defer.maybeDeferred(self.engine.start)</span><br><span class="line">    except Exception:</span><br><span class="line">        self.crawling = False</span><br><span class="line">        if self.engine is not None:</span><br><span class="line">            yield self.engine.close()</span><br><span class="line">        raise</span><br></pre></td></tr></table></figure><h3 id="4-3-ExecutionEngine-open-spider分析"><a href="#4-3-ExecutionEngine-open-spider分析" class="headerlink" title="4.3. ExecutionEngine.open_spider分析"></a>4.3. ExecutionEngine.open_spider分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@defer.inlineCallbacks</span><br><span class="line">def open_spider(self, spider, start_requests=(), close_if_idle=True):</span><br><span class="line">  assert self.has_capacity(), &quot;No free spider slot when opening %r&quot; % \</span><br><span class="line">      spider.name</span><br><span class="line">  logger.info(&quot;Spider opened&quot;, extra=&#123;&apos;spider&apos;: spider&#125;)</span><br><span class="line">  # 调度要在下一个reactor循环中调用的函数，但前提是该函数自上次运行以来尚未被调度</span><br><span class="line">  nextcall = CallLaterOnce(self._next_request, spider)</span><br><span class="line">  # 调度器加载</span><br><span class="line">  scheduler = self.scheduler_cls.from_crawler(self.crawler)</span><br><span class="line">  # 中间件处理MiddleWare</span><br><span class="line">  start_requests = yield self.scraper.spidermw.process_start_requests(start_requests, spider)</span><br><span class="line">  # engine核心</span><br><span class="line">  slot = Slot(start_requests, close_if_idle, nextcall, scheduler)</span><br><span class="line">  self.slot = slot</span><br><span class="line">  self.spider = spider</span><br><span class="line">  # 打开调度器</span><br><span class="line">  yield scheduler.open(spider)</span><br><span class="line">  yield self.scraper.open_spider(spider)</span><br><span class="line">  self.crawler.stats.open_spider(spider)</span><br><span class="line">  # 发送信号，spider可以启动了</span><br><span class="line">  yield self.signals.send_catch_log_deferred(signals.spider_opened, spider=spider)</span><br><span class="line">  # reactor调度开始</span><br><span class="line">  slot.nextcall.schedule()</span><br><span class="line">  # 官网解释：Start running function every interval seconds. 也即是nextcall.schedule</span><br><span class="line">  slot.heartbeat.start(5)</span><br></pre></td></tr></table></figure><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><blockquote><p>看完以上代码流程，心中肯定会有如下一些疑问？</p><ul><li>@defer.inlineCallbacks 的作用是什么？reactor又是如何异步轮询？</li><li>self.scraper.spidermw.process_start_requests 中间件是如何加载起作用的？</li><li>yield self.signals.send_catch_log_deferred 的运作原理是什么，究竟是如何启动爬虫的？</li><li>scheduler 调度器倒是如何被调度的？</li><li>scrapy middelware 又是如何起作用的？</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;scrapy项目介绍&quot;&gt;&lt;a href=&quot;#scrapy项目介绍&quot; class=&quot;headerlink&quot; title=&quot;scrapy项目介绍&quot;&gt;&lt;/a&gt;scrapy项目介绍&lt;/h1&gt;&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;General&lt;/l
      
    
    </summary>
    
      <category term="爬虫-scrapy" scheme="https://langgithub.github.io/categories/%E7%88%AC%E8%99%AB-scrapy/"/>
    
    
      <category term="scrapy" scheme="https://langgithub.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>简单图形验证码</title>
    <link href="https://langgithub.github.io/2020/06/09/%E7%AE%80%E5%8D%95%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>https://langgithub.github.io/2020/06/09/简单图形验证码/</id>
    <published>2020-06-09T09:29:21.395Z</published>
    <updated>2020-06-09T09:29:21.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 准备</span><br><span class="line">1. brew install tesseract</span><br><span class="line">2. pip install pytesseract</span><br><span class="line">3. 去往https://github.com/tesseract-ocr/tessdata下载中文数据集chi_sim.traineddata，把它放到这目录下： /usr/local/Cellar/tesseract/3.05.01/share/tessdata</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import pytesseract</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line"># open image</span><br><span class="line">image = Image.open(&apos;test.png&apos;)</span><br><span class="line">code = pytesseract.image_to_string(image, lang=&apos;chi_sim&apos;)</span><br><span class="line">print(code)</span><br></pre></td></tr></table></figure></p><p>总结：验证码处理步骤</p><ol><li>灰度化</li><li>二值化（涉及到找阀值 类间方差）</li><li>去干扰线</li><li>降噪 （高斯降噪）</li><li>切割</li><li>识别</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MAC&quot;&gt;&lt;a href=&quot;#MAC&quot; class=&quot;headerlink&quot; title=&quot;MAC&quot;&gt;&lt;/a&gt;MAC&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
      <category term="爬虫-js逆向" scheme="https://langgithub.github.io/categories/%E7%88%AC%E8%99%AB-js%E9%80%86%E5%90%91/"/>
    
    
      <category term="简单图形验证码" scheme="https://langgithub.github.io/tags/%E7%AE%80%E5%8D%95%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>自动化测试对比</title>
    <link href="https://langgithub.github.io/2020/06/09/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AF%B9%E6%AF%94/"/>
    <id>https://langgithub.github.io/2020/06/09/自动化测试对比/</id>
    <published>2020-06-09T09:29:21.395Z</published>
    <updated>2020-06-09T09:29:21.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自动化对比"><a href="#自动化对比" class="headerlink" title="自动化对比"></a>自动化对比</h2><table><thead><tr><th style="text-align:left">模块</th><th style="text-align:right">UIAutomation</th><th style="text-align:right">appium</th><th style="text-align:right">selenium</th><th style="text-align:right">pyppeteer</th><th style="text-align:right">终极武器(chrome-devtools-protocol)</th></tr></thead><tbody><tr><td style="text-align:left">跨平台</td><td style="text-align:right">否</td><td style="text-align:right">Android，ios</td><td style="text-align:right">是</td><td style="text-align:right">chrome 浏览器就行</td><td style="text-align:right">是</td></tr><tr><td style="text-align:left">缺点</td><td style="text-align:right">无法跨平台</td><td style="text-align:right">adb驱动</td><td style="text-align:right">太强大</td><td style="text-align:right">chrome 协议</td><td style="text-align:right">底层</td></tr><tr><td style="text-align:left">driver</td><td style="text-align:right">google原生</td><td style="text-align:right">UIAutomation</td><td style="text-align:right">#很多</td><td style="text-align:right">chrome</td><td style="text-align:right">all</td></tr></tbody></table><p>#很多：</p><ol><li><p>selenium可支持的PC浏览器驱动包括：</p><p> safari driver【包含在selenium server中】</p><p> ie driver</p><p> chrome driver 【第三方】</p><p> opera driver【第三方]</p></li><li><p>selenium可支持的伪浏览器驱动：</p><p> PhantomJS Driver【第三方,停止更新】</p><p> HtmlUnit Driver【包含在selenium server中】</p></li><li><p>selenium可支持的移动端驱动：</p><p> Windows Phone driver </p><p> Selendroid-Selenium for Android【第三方】</p><p> ios-driver【第三方】</p><p> Appium 支持iphone、ipad、android、FirefoxOS【第三方】</p></li></ol><h2 id="驱动代码"><a href="#驱动代码" class="headerlink" title="驱动代码"></a>驱动代码</h2><ul><li><h3 id="UIAutomation"><a href="#UIAutomation" class="headerlink" title="UIAutomation"></a>UIAutomation</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">python 端安装 uiautomator2 client：</span><br><span class="line">pip install uiautomator2</span><br><span class="line">Android端安装 ATX server</span><br><span class="line">安装方法</span><br><span class="line">离线</span><br><span class="line">    将init_machine.sh,及android_package.zip上传至/data/local/tmp目录下</span><br><span class="line">    给手机安装termux，此为命令行工具，打开软件</span><br><span class="line">    输入su,切换至管理员账户</span><br><span class="line">    输入cd data/local/tmp,因为云手机不能打/符，所有用tab键来凑齐。</span><br><span class="line">    输入sh init_machine.sh,即可安装好软件和服务</span><br><span class="line">    </span><br><span class="line">usb线连</span><br><span class="line">    在电脑上输入python -m uiautomator2 init即可</span><br><span class="line">    ### 2、打开ATX</span><br><span class="line">    打开ATX 点击&quot;启动uiautomator&quot;</span><br><span class="line">    ### 3、打开QpythonL</span><br><span class="line">    一定要先打开这个软件，不然你python脚本会上传不成功</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import uiautomator2 as u2</span><br><span class="line"></span><br><span class="line"># 0.0.0.0 为本机，127.0.0.1这个也行，这个连接是在手机上运行的</span><br><span class="line">d = u2.connect(&apos;http://0.0.0.0:7912&apos;)</span><br><span class="line"># 如果远程操作，就填入手机ATX显示的ip，下面有图</span><br><span class="line"># d = u2.connect(&apos;http://172.17.2.237:7912&apos;)</span><br><span class="line"># 字符串为包名，下面有获取包名教程</span><br><span class="line">sess = d.session(&quot;com.tencent.wework&quot;)</span><br><span class="line"></span><br><span class="line">def my_click(sess, ele, timeout=3):</span><br><span class="line">    ele.wait(timeout=timeout) # 等待超时，因为可能此时界面动画，或者反映迟钝，该控件还没出现</span><br><span class="line">    x, y = ele.center() # 找到该空间的中间坐标</span><br><span class="line">    sess.touch.down(x, y) # 在此坐标按下</span><br><span class="line">    time.sleep(0.3)</span><br><span class="line">    sess.touch.up() #等待3秒后抬起</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def click_search_btn(sess):</span><br><span class="line">    ele = sess(resourceId=package_name+&quot;:id/e3g&quot;, #找到该空间的id</span><br><span class="line">               className=&quot;android.widget.TextView&quot;,# 找到该空间的类名</span><br><span class="line">               instance=0) #如果根据属性查找有多个控件，则找第一个</span><br><span class="line">    my_click(sess, ele, 20)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">click_search_btn(sess)</span><br><span class="line">print(&apos;begin to input&apos;)</span><br><span class="line">ele = sess(resourceId=&quot;com.tencent.wework:id/dpu&quot;, className=&quot;android.widget.EditText&quot;)</span><br><span class="line">ele.set_text(phone) # 将手机号填入</span><br><span class="line">print(&apos;end to input&apos;)</span><br><span class="line">time.sleep(2)</span><br><span class="line"># print(u&quot;点击搜索&quot;)</span><br><span class="line"># 点击搜索</span><br><span class="line">sess(resourceId=&quot;com.tencent.wework:id/azq&quot;,</span><br><span class="line">           className=&quot;android.widget.RelativeLayout&quot;).child(className=&quot;android.widget.TextView&quot;).click() # 因为该控件没有id，所以先找它爹，再找它爹的儿子控件，.click()直接触发点击事件。</span><br><span class="line">ele1 = sess(resourceId=&quot;com.tencent.wework:id/sa&quot;,</span><br><span class="line">               className=&quot;android.widget.TextView&quot;)</span><br><span class="line">ele1.get_text() # 获取标签文本内容</span><br></pre></td></tr></table></figure><ul><li><h3 id="Seleinum"><a href="#Seleinum" class="headerlink" title="Seleinum"></a>Seleinum</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">安装：</span><br><span class="line">pip install selenium</span><br><span class="line">自行下载需要驱动的driver：如chromedriver</span><br><span class="line">实用executable_path 引入driver路径</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">import time</span><br><span class="line"> </span><br><span class="line">drivers = [&apos;HtmlUnit&apos;, &apos;PhantomJS&apos;, &apos;Chrome&apos;, &apos;FF&apos;, &apos;IE&apos;] </span><br><span class="line"> </span><br><span class="line">dervers_time = &#123;</span><br><span class="line">&apos;HtmlUnit&apos; : 0,</span><br><span class="line">&apos;PhantomJS&apos; : 0,</span><br><span class="line">&apos;Chrome&apos; : 0,</span><br><span class="line">&apos;FF&apos; : 0,</span><br><span class="line">&apos;IE&apos; : 0,</span><br><span class="line">&#125;</span><br><span class="line">times = 50</span><br><span class="line">def run_with_Chrome():</span><br><span class="line">common_step(webdriver.Chrome())</span><br><span class="line"> </span><br><span class="line">def run_with_FF():</span><br><span class="line">common_step(webdriver.Firefox())</span><br><span class="line"></span><br><span class="line">def run_with_IE():</span><br><span class="line">common_step(webdriver.Ie())</span><br><span class="line"> </span><br><span class="line">def run_with_PhantomJS():</span><br><span class="line">common_step(webdriver.PhantomJS(executable_path=r&apos;C:\Python27\Scripts\phantomjs.exe&apos;))</span><br><span class="line"></span><br><span class="line">def run_with_HtmlUnit():</span><br><span class="line">driver = webdriver.Remote(&quot;http://localhost:4444/wd/hub&quot;, </span><br><span class="line">desired_capabilities=webdriver.DesiredCapabilities.HTMLUNIT)</span><br><span class="line">common_step(driver)</span><br><span class="line"></span><br><span class="line">def common_step(driver):</span><br><span class="line">driver.get(&apos;http://www.baidu.com&apos;)</span><br><span class="line">ele = driver.find_element_by_id(&apos;su&apos;)</span><br><span class="line">print ele.get_attribute(&apos;value&apos;)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><ul><li><h3 id="Appium"><a href="#Appium" class="headerlink" title="Appium"></a>Appium</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.node.js 安装</span><br><span class="line">brew install node</span><br><span class="line">npm install -g appium  # get appium     </span><br><span class="line">npm install wd         # get appium client</span><br><span class="line"></span><br><span class="line">直接用npm下载往往不成功，这是需要通过代理来下载</span><br><span class="line">具体方法如下：</span><br><span class="line">npm i cnpm -g --registry=http://registry.npm.taobao.org</span><br><span class="line">cnpm i appium -g       # get appium</span><br><span class="line">cnpm i wd -g　　       # get appium client</span><br><span class="line">cnpm i appium-doctor 　# get appium-doctor</span><br><span class="line"></span><br><span class="line">2.检查Appium成功安装</span><br><span class="line">appium-doctor</span><br><span class="line">更具提示配置 xcode 和 Android SDK</span><br><span class="line"></span><br><span class="line">3.下载appium客户端更加方便地址 github</span><br><span class="line">4.python client 安装 pip install Appium_Python_Client</span><br><span class="line">5.启动appium server .用客户端appium 启动即可</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">--------------------------------------</span><br><span class="line">@describe 自动化微信添加好友</span><br><span class="line">@version: 1.0</span><br><span class="line">@project: operator_spider</span><br><span class="line">@file: app_chrome.py</span><br><span class="line">@author: yuanlang </span><br><span class="line">@time: 2019-02-19 10:14</span><br><span class="line">---------------------------------------</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import unittest</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">from appium import webdriver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyTestCase(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    def setUp(self):</span><br><span class="line">        capabilities = &#123;</span><br><span class="line">            &apos;platformName&apos;: &apos;Android&apos;,</span><br><span class="line">            &apos;platformVersion&apos;: &quot;5.1&quot;,</span><br><span class="line">            &apos;deviceName&apos;: &quot;mx4&quot;,</span><br><span class="line">            &apos;appPackage&apos;: &apos;com.tencent.mm&apos;,</span><br><span class="line">            &apos;appActivity&apos;: &apos;.ui.LauncherUI&apos;,</span><br><span class="line">            &apos;automationName&apos;: &apos;Uiautomator2&apos;,</span><br><span class="line">            &apos;unicodeKeyboard&apos;: True,</span><br><span class="line">            &apos;resetKeyboard&apos;: True,</span><br><span class="line">            &apos;noReset&apos;: True,</span><br><span class="line">            &apos;chromeOptions&apos;: &#123;&apos;androidProcess&apos;: &apos;com.tencent.mm:tools&apos;&#125;,</span><br><span class="line">        &#125;</span><br><span class="line">        self.driver = webdriver.Remote(&quot;http://127.0.0.1:4723/wd/hub&quot;, capabilities)</span><br><span class="line">        self.driver.implicitly_wait(30)</span><br><span class="line"></span><br><span class="line">        sleep(5)</span><br><span class="line"></span><br><span class="line">    def test_chromeApp(self):</span><br><span class="line">        # 点击加号</span><br><span class="line">        print(&quot;search&quot;)</span><br><span class="line">        driver = self.driver</span><br><span class="line">        el1 = driver.find_element_by_id(&quot;com.tencent.mm:id/gd&quot;)</span><br><span class="line">        el1.click()</span><br><span class="line">        sleep(5)</span><br><span class="line">        el2 = driver.find_element_by_xpath(</span><br><span class="line">            &quot;/hierarchy/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[2]/android.widget.LinearLayout/android.widget.TextView&quot;)</span><br><span class="line">        el2.click()</span><br><span class="line">        sleep(5)</span><br><span class="line">        el3 = driver.find_element_by_id(&quot;com.tencent.mm:id/hx&quot;)</span><br><span class="line">        el3.click()</span><br><span class="line">        sleep(5)</span><br><span class="line">        driver.find_element_by_id(&quot;com.tencent.mm:id/hx&quot;).send_keys(&quot;15775691981&quot;)</span><br><span class="line">        sleep(5)</span><br><span class="line">        driver.find_element_by_id(&quot;com.tencent.mm:id/l4&quot;).click()</span><br><span class="line">        sleep(5)</span><br><span class="line">        print(driver.context)</span><br><span class="line">        name = driver.find_element_by_id(&quot;com.tencent.mm:id/ang&quot;).text</span><br><span class="line">        print(name)</span><br><span class="line"></span><br><span class="line">    def tearDown(self):</span><br><span class="line">        self.driver.close_app()</span><br><span class="line">        self.driver.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h2 id="pyppeteer"><a href="#pyppeteer" class="headerlink" title="pyppeteer"></a>pyppeteer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">原生是node.js 开发基于chrome-devtools-protocol + websocket</span><br><span class="line">python也有对应改写版</span><br><span class="line">项目由google维护</span><br><span class="line"></span><br><span class="line">pip install pyppeteer</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">--------------------------------------</span><br><span class="line">@describe </span><br><span class="line">@version: 1.0</span><br><span class="line">@project: operator_spider</span><br><span class="line">@file: dddd.py</span><br><span class="line">@author: yuanlang </span><br><span class="line">@time: 2019-02-21 19:11</span><br><span class="line">---------------------------------------</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import asyncio</span><br><span class="line">import pyppeteer</span><br><span class="line">from collections import namedtuple</span><br><span class="line"></span><br><span class="line">Response = namedtuple(&quot;rs&quot;, &quot;title url html cookies headers history status&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">async def get_html(url, timeout=30):</span><br><span class="line">    # 默认30s</span><br><span class="line">    #,executablePath=&quot;&quot;</span><br><span class="line">    browser = await pyppeteer.launch(headless=False, args=[&apos;--no-sandbox&apos;])</span><br><span class="line">    page = await  browser.newPage()</span><br><span class="line">    js=&quot;&quot;&quot;</span><br><span class="line">    function sniffDetector() &#123;</span><br><span class="line">    const userAgent = window.navigator.userAgent;</span><br><span class="line">    const platform = window.navigator.platform;</span><br><span class="line"></span><br><span class="line">    window.navigator.__defineGetter__(&apos;userAgent&apos;, function() &#123;</span><br><span class="line">      window.navigator.sniffed = true;</span><br><span class="line">      return userAgent;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    window.navigator.__defineGetter__(&apos;platform&apos;, function() &#123;</span><br><span class="line">      window.navigator.sniffed = true;</span><br><span class="line">      return platform;</span><br><span class="line">    &#125;);</span><br><span class="line">    //自动化反反爬虫，反自动化检测</span><br><span class="line">    Object.defineProperty(navigator, &apos;webdriver&apos;, &#123;</span><br><span class="line">        get: () =&gt; false,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    await page.evaluateOnNewDocument(js)</span><br><span class="line">    res = await page.goto(url, options=&#123;&apos;timeout&apos;: int(timeout * 1000)&#125;)</span><br><span class="line">    await asyncio.sleep(5)</span><br><span class="line">    data = await page.content()</span><br><span class="line">    title = await page.title()</span><br><span class="line">    resp_cookies = await page.cookies()</span><br><span class="line">    resp_headers = res.headers</span><br><span class="line">    resp_history = None</span><br><span class="line">    resp_status = res.status</span><br><span class="line">    response = Response(title=title, url=url,</span><br><span class="line">                        html=data,</span><br><span class="line">                        cookies=resp_cookies,</span><br><span class="line">                        headers=resp_headers,</span><br><span class="line">                        history=resp_history,</span><br><span class="line">                        status=resp_status)</span><br><span class="line">    return response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    url_list = [&quot;https://jx.ac.10086.cn&quot;]</span><br><span class="line">    task = (get_html(url) for url in url_list)</span><br><span class="line"></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    results = loop.run_until_complete(asyncio.gather(*task))</span><br><span class="line">    for res in results:</span><br><span class="line">        print(res)</span><br></pre></td></tr></table></figure><h2 id="chrome-devtools-protocol"><a href="#chrome-devtools-protocol" class="headerlink" title="chrome-devtools-protocol"></a>chrome-devtools-protocol</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">底层采用websocket 协议控制浏览器。[协议连接](https://chromedevtools.github.io/devtools-protocol/)</span><br><span class="line">安装</span><br><span class="line">1.pip install pychrom</span><br><span class="line">2./Chromium --remote-debugging-port=9222</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import pychrome</span><br><span class="line"></span><br><span class="line">browser = pychrome.Browser(url=&quot;http://127.0.0.1:9222&quot;)</span><br><span class="line">tab = browser.new_tab()</span><br><span class="line"></span><br><span class="line">def request_will_be_sent(**kwargs):</span><br><span class="line">    print(&quot;loading: %s&quot; % kwargs.get(&apos;request&apos;).get(&apos;url&apos;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tab.set_listener(&quot;Network.requestWillBeSent&quot;, request_will_be_sent)</span><br><span class="line"></span><br><span class="line">tab.start()</span><br><span class="line">tab.call_method(&quot;Network.enable&quot;)</span><br><span class="line">tab.call_method(&quot;Page.navigate&quot;, url=&quot;https://jx.ac.10086.cn&quot;, _timeout=5)</span><br><span class="line">import time</span><br><span class="line"># print(&quot;ok&quot;)</span><br><span class="line">time.sleep(5)</span><br><span class="line">result=tab.call_method(&quot;Runtime.evaluate&quot;,expression=&quot;document.documentElement.outerHTML&quot;)</span><br><span class="line">print(result)</span><br><span class="line">tab.stop()</span><br></pre></td></tr></table></figure><h1 id="自动化反反爬虫"><a href="#自动化反反爬虫" class="headerlink" title="自动化反反爬虫"></a>自动化反反爬虫</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty(navigator, &apos;webdriver&apos;, &#123;</span><br><span class="line">        get: () =&gt; false,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;</span><br><span class="line">// overwrite the `languages` property to use a custom getter</span><br><span class="line">Object.defineProperty(navigator, &quot;languages&quot;, &#123;</span><br><span class="line">  get: function() &#123;</span><br><span class="line">    return [&quot;zh-CN&quot;,&quot;zh&quot;,&quot;zh-TW&quot;,&quot;en-US&quot;,&quot;en&quot;];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Overwrite the `plugins` property to use a custom getter.</span><br><span class="line">Object.defineProperty(navigator, &apos;plugins&apos;, &#123;</span><br><span class="line">  get: () =&gt; [1, 2, 3, 4, 5],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Pass the Webdriver test</span><br><span class="line">Object.defineProperty(navigator, &apos;webdriver&apos;, &#123;</span><br><span class="line">  get: () =&gt; false,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Pass the Chrome Test.</span><br><span class="line">// We can mock this in as much depth as we need for the test.</span><br><span class="line">window.navigator.chrome = &#123;</span><br><span class="line">  runtime: &#123;&#125;,</span><br><span class="line">  // etc.</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Pass the Permissions Test.</span><br><span class="line">const originalQuery = window.navigator.permissions.query;</span><br><span class="line">window.navigator.permissions.query = (parameters) =&gt; (</span><br><span class="line">  parameters.name === &apos;notifications&apos; ?</span><br><span class="line">    Promise.resolve(&#123; state: Notification.permission &#125;) :</span><br><span class="line">    originalQuery(parameters)</span><br><span class="line">);</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 修改chromedriver</span><br><span class="line">$ hexedit chromedriver </span><br><span class="line"></span><br><span class="line">        # 操作</span><br><span class="line">        1. tab 跳转到string栏</span><br><span class="line">        2. ctrl+S 查找 var key = &apos;$cdc_asdjflasutopfhvcZLmcfl_&apos;（对于2.40版本）</span><br><span class="line">        3. 替换&apos;$cdc_asdjflasutopfhvcZLmcfl_&apos;为任意值</span><br><span class="line">        4. ctrl+X 保存</span><br><span class="line"></span><br><span class="line"># 移动chromedriver 到 /usr/bin</span><br><span class="line">$ mv chromedriver /usr/bin</span><br><span class="line"></span><br><span class="line">[详细连接](&quot;https://zhuanlan.zhihu.com/p/43581988?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=32546582691840&amp;from=groupmessage&quot;)</span><br></pre></td></tr></table></figure><p>总结：seleium 是采用webdriver 协议 ,seleium server端也是使用chrome-devtools-protocol。只不过为了跨平台采用webdriver restful api 形式开发。chrome-devtools-protocol 可以使用 ./chromium –remote-debug 自动化测试</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;自动化对比&quot;&gt;&lt;a href=&quot;#自动化对比&quot; class=&quot;headerlink&quot; title=&quot;自动化对比&quot;&gt;&lt;/a&gt;自动化对比&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;模块&lt;/th&gt;
&lt;th 
      
    
    </summary>
    
      <category term="爬虫-玄学" scheme="https://langgithub.github.io/categories/%E7%88%AC%E8%99%AB-%E7%8E%84%E5%AD%A6/"/>
    
    
      <category term="自动化" scheme="https://langgithub.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>爬虫-engine</title>
    <link href="https://langgithub.github.io/2020/06/09/%E7%88%AC%E8%99%AB-engine/"/>
    <id>https://langgithub.github.io/2020/06/09/爬虫-engine/</id>
    <published>2020-06-09T09:29:21.395Z</published>
    <updated>2020-06-09T09:29:21.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫engine"><a href="#爬虫engine" class="headerlink" title="爬虫engine"></a>爬虫engine</h1><ol><li>线程池如何实现engine</li><li>ayncio如何实现engine</li></ol><h3 id="线程池engine实现"><a href="#线程池engine实现" class="headerlink" title="线程池engine实现"></a>线程池engine实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">import threading</span><br><span class="line">from queue import Queue</span><br><span class="line">queue=Queue()</span><br><span class="line">headers = &#123;</span><br><span class="line">    &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36&apos;</span><br><span class="line">&#125;</span><br><span class="line">base_path=&quot;archives&quot;</span><br><span class="line"></span><br><span class="line">class WorkThread(threading.Thread):</span><br><span class="line"></span><br><span class="line">    def __init__(self,name,queue):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.name=name</span><br><span class="line">        self.queue=queue</span><br><span class="line">    </span><br><span class="line">    def run(self):</span><br><span class="line">        while True:</span><br><span class="line">            url,file_img_path=self.queue.get()</span><br><span class="line">            print(f&quot;fetch url==&gt;&#123;url&#125;  path==&gt;&#123;file_img_path&#125;&quot;)</span><br><span class="line">            self.download(url,file_img_path)</span><br><span class="line">            if queue.empty():</span><br><span class="line">                print(f&quot;任务做完，&#123;self.name&#125; 休息中&quot;)</span><br><span class="line">                time.sleep(2)</span><br><span class="line"></span><br><span class="line">    def download(self,img_url,file_img_path):</span><br><span class="line">        img_response = requests.get(img_url, headers=headers)</span><br><span class="line">        with open(file_img_path, &quot;wb&quot;) as f:</span><br><span class="line">            f.write(img_response.content)</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">def engine():</span><br><span class="line">    global queue</span><br><span class="line">    thread_pool=[]</span><br><span class="line">    for i in range(10):</span><br><span class="line">        t = WorkThread(f&quot;Thread &#123;i&#125;&quot;,queue)</span><br><span class="line">        t.start()</span><br><span class="line">        thread_pool.append(t)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;爬虫engine&quot;&gt;&lt;a href=&quot;#爬虫engine&quot; class=&quot;headerlink&quot; title=&quot;爬虫engine&quot;&gt;&lt;/a&gt;爬虫engine&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;线程池如何实现engine&lt;/li&gt;
&lt;li&gt;ayncio如何实现engine&lt;
      
    
    </summary>
    
      <category term="爬虫-玄学" scheme="https://langgithub.github.io/categories/%E7%88%AC%E8%99%AB-%E7%8E%84%E5%AD%A6/"/>
    
    
      <category term="爬虫" scheme="https://langgithub.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫日志收集（flume+kafka+elk）</title>
    <link href="https://langgithub.github.io/2020/06/09/%E7%88%AC%E8%99%AB%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%EF%BC%88flume+kafka+elk%EF%BC%89/"/>
    <id>https://langgithub.github.io/2020/06/09/爬虫日志收集（flume+kafka+elk）/</id>
    <published>2020-06-09T09:29:21.395Z</published>
    <updated>2020-06-09T09:29:21.395Z</updated>
    
    <content type="html"><![CDATA[<p>（一）flume1.6<br>1.1 flume配置（将日志上传到HDFS离线分析和kafka实时分析）<br>a1.sources = r1</p><p>a1.sinks = k2 k1</p><p>a1.channels = c2 c1</p><h1 id="Describe-configure-the-source"><a href="#Describe-configure-the-source" class="headerlink" title="Describe/configure the source"></a>Describe/configure the source</h1><p>a1.sources.r1.type = exec</p><p>a1.sources.r1.command=tail -n +0 -f /usr/lang/log.log</p><p>a1.sources.r1.channels = c1</p><p>a1.sources.r1.channels = c2</p><h1 id="Describe-the-sink"><a href="#Describe-the-sink" class="headerlink" title="Describe the sink"></a>Describe the sink</h1><p>a1.sinks.k1.type = hdfs</p><p>a1.sinks.k1.channel = c1</p><p>a1.sinks.k1.hdfs.path = hdfs://lang:8020/user/flume</p><p>a1.sinks.k1.hdfs.filePrefix = events-</p><p>a1.sinks.k1.hdfs.round = true</p><p>a1.sinks.k1.hdfs.roundValue = 10</p><p>a1.sinks.k1.hdfs.roundUnit = minute</p><p>a1.sinks.k2.channel=c2</p><p>a1.sinks.k2.type=org.apache.flume.sink.kafka.KafkaSink</p><p>a1.sinks.k2.topic=lang</p><p>a1.sinks.k2.brokerList=node1:9092</p><p>a1.sinks.k2.requiredAcks=1</p><p>a1.sinks.k2.batchSize=20</p><h1 id="Use-a-channel-which-buffers-events-in-memory"><a href="#Use-a-channel-which-buffers-events-in-memory" class="headerlink" title="Use a channel which buffers events in memory"></a>Use a channel which buffers events in memory</h1><p>a1.channels.c1.type = memory</p><p>a1.channels.c1.capacity = 1000</p><p>a1.channels.c1.transactionCapacity = 100</p><p>a1.channels.c2.type = memory</p><p>a1.channels.c2.capacity = 1000</p><p>a1.channels.c2.transactionCapacity = 100</p><p>1.2 flume启动<br>bin/flume-ng  agent -c conf -f conf/flume-conf -n a1 -Dflume.root.logger=DEBUG,console</p><p>（二）kafka 0.11集群<br>2.1重要配置文件<br>server.properties:</p><pre><code>broker.id=0  (根据实际主机，分配0,1,2)listeners=PLAINTEXT://:9092zookeeper.connect=192.168.205.11:2181,192.168.205.12:2181,192.168.205.13:2181</code></pre><p>producer.properties</p><pre><code>bootstrap.servers=192.168.205.11:9092,192.168.205.12:9092,192.168.205.13:9092</code></pre><p>consumer.properties</p><pre><code>zookeeper.connect=192.168.205.11:2181,192.168.205.12:2181,192.168.205.13:2181</code></pre><p>2.2同步配置文件<br>2.3相关命令<br>先启动zookeeper</p><p>启动kafka   bin/kafka-server-start.sh config/server.properties &amp;</p><p>停止kafka    bin/kafka-server-stop.sh</p><p>创建topic     bin/kafka-topics.sh –create –zookeeper localhost:2181 –replication-factor 1 –partitions 1 –topic lang</p><p>展示topic     bin/kafka-topics.sh –list –zookeeper localhost:2181</p><p>描述topic     bin/kafka-topics.sh –describe –zookeeper localhost:2181 –topic lang</p><p>生产者：      bin/kafka-console-producer.sh –broker-list node1:9092 –topic lang</p><p>消费者：      bin/kafka-console-consumer.sh -bootstrap-server localhost:9092 –topic lang –from-beginning</p><p>删除topic:     bin/kafka-topics.sh –delete –zookeeper 130.51.23.95:2181 –topic topicname</p><p>(三)logstash5.5.1<br>3.1配置（文件输入，es输出）<br>input {</p><p>file {</p><p>path =&gt; [“/usr/lang/log.log”]</p><p>start_position =&gt; “beginning”</p><p>}</p><p>}</p><p>filter {</p><p>date {</p><p>match =&gt; [ “timestamp” , “YYYY-MM-dd HH:mm:ss” ]</p><p>}</p><p>}</p><p>output {</p><p>elasticsearch {</p><p>hosts =&gt; [“192.168.205.14:9200”]</p><p>}</p><p>stdout {</p><p>codec =&gt; rubydebug</p><p>}</p><p>}</p><p>3.2配置（kafka输入，es输出）<br>input {</p><p>kafka {</p><p>#workers =&gt;2</p><p>bootstrap_servers =&gt; “node1:9092,node2:9092,node3:9092”    #zookeeper地址</p><p>topics =&gt; “lang”    #kafka中topic名称，记得创建该topic</p><p>#group_id =&gt; “logstash”    #默认为“logstash”</p><p>#consumer_threads =&gt;2    #消费的线程数</p><p>#reset_beginning =&gt; false</p><p>#reset_beginning=&gt;true</p><p>#decorate_events =&gt; true    #在输出消息的时候回输出自身的信息，包括：消费消息的大小、topic来源以及consumer的group信息。</p><p>#type =&gt; “nginx-access-log”</p><p>}</p><p>}</p><p>filter {</p><p>date {</p><p>match =&gt; [ “timestamp” , “YYYY-MM-dd HH:mm:ss” ]</p><p>}</p><p>}</p><p>output {</p><p>elasticsearch {</p><p>hosts =&gt; [“192.168.205.14:9200”]</p><p>#index =&gt; “kafakindex-%{+YYYY.MM.dd}”</p><p>}</p><p>stdout {</p><p>codec =&gt; rubydebug</p><p>}</p><p>}</p><p>（四）elasticsearch<br>4.1内存配置   config/jvm.properties<br>4.2配置文件   config/elsticsearch<br>cluster.name: my-application</p><p>node.name: node-1(集群中名称不一样)</p><p>network.host: 192.168.205.14</p><p>http.port: 9200</p><p>bootstrap.system_call_filter: false</p><p>http.cors.enabled: true</p><p>http.cors.allow-origin: “*”</p><p>4.3注意事项：Java内存参数，配置文件中空格问题<br>4.4elasticsearch-head（索引UI管理界面）<br>（五）kibana<br>没啥，直接启动</p><p>有问题直接联系我 QQ：1146941596</p><p>参考资料</p><p>1.elk安装（参照官网）</p><p><a href="http://blog.csdn.net/onlylove_longshao/article/details/72765696" target="_blank" rel="noopener">http://blog.csdn.net/onlylove_longshao/article/details/72765696</a></p><p>2.注意点：操作系统内存2G，系统某些参数配置</p><p>3.elasticsearch-head 安装</p><pre><code>http://blog.csdn.net/napoay/article/details/53896348</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;（一）flume1.6&lt;br&gt;1.1 flume配置（将日志上传到HDFS离线分析和kafka实时分析）&lt;br&gt;a1.sources = r1&lt;/p&gt;
&lt;p&gt;a1.sinks = k2 k1&lt;/p&gt;
&lt;p&gt;a1.channels = c2 c1&lt;/p&gt;
&lt;h1 id=&quot;De
      
    
    </summary>
    
      <category term="数据存储-bigdata" scheme="https://langgithub.github.io/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-bigdata/"/>
    
    
      <category term="hadoop" scheme="https://langgithub.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>滑块验证码</title>
    <link href="https://langgithub.github.io/2020/06/09/%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>https://langgithub.github.io/2020/06/09/滑块验证码/</id>
    <published>2020-06-09T09:29:21.394Z</published>
    <updated>2020-06-09T09:29:21.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="滑块验证码破解"><a href="#滑块验证码破解" class="headerlink" title="滑块验证码破解"></a>滑块验证码破解</h1><h3 id="方式一-数据发包"><a href="#方式一-数据发包" class="headerlink" title="方式一 数据发包"></a>方式一 数据发包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如zhongguorenshou.py,思路</span><br><span class="line">1.请求背景图片</span><br><span class="line">2.两张图片滑动距离（有的需要图片还原）</span><br><span class="line">3.更具滑动距离模拟生成鼠标滑动参数和时间</span><br></pre></td></tr></table></figure><h3 id="方式二-driver"><a href="#方式二-driver" class="headerlink" title="方式二 driver"></a>方式二 driver</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ru industry.py</span><br><span class="line">基于selenium+phantomjs 原理</span><br><span class="line"></span><br><span class="line">1.phantomjs 是一款基于浏览器内核软件</span><br><span class="line">2.通过selenium模拟人为操作</span><br><span class="line">3.缺点：和浏览器操作一样，慢</span><br><span class="line">4.优势：不用模拟鼠标滑动，易过调</span><br></pre></td></tr></table></figure><h3 id="方式三-收集滑动轨迹，存放到数据库"><a href="#方式三-收集滑动轨迹，存放到数据库" class="headerlink" title="方式三  收集滑动轨迹，存放到数据库"></a>方式三  收集滑动轨迹，存放到数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.请求背景图片</span><br><span class="line">2.两张图片滑动距离（有的需要图片还原）</span><br><span class="line">3.采用js hook 方式手机滑动轨迹</span><br></pre></td></tr></table></figure><h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><p>v1 是老版本工商滑块 （无法使用了）<br>v2 通过发包的方式过滑块 （滑块跟新块，基本不考虑，无法使用）<br>v3 推荐使用滑块方式</p><p>more: v3介绍<br>亮点一：v3中的滑动距离计算，采用计算两张图片差值进行灰度化，在二值化（采用类间方差）<br>亮点二：轨迹生成方面采用算法更高效</p><h3 id="介绍js-hook"><a href="#介绍js-hook" class="headerlink" title="介绍js hook"></a>介绍js hook</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//目标hook函数startRecord</span><br><span class="line">//添加自己的日志代码</span><br><span class="line">orig = window.startRecord;</span><br><span class="line">window.startRecord=function(str)&#123;</span><br><span class="line">    orig(str);</span><br><span class="line">    console.log(&apos;-----------typeMouse------------&apos;);</span><br><span class="line">    console.log(typeMouse);</span><br><span class="line">    console.log(&apos;-----------pageXAxis------------&apos;);</span><br><span class="line">    console.log(pageXAxis);</span><br><span class="line">    console.log(&apos;-----------pageYAxis------------&apos;);</span><br><span class="line">    console.log(pageYAxis);</span><br><span class="line">    console.log(&apos;-----------mouseTime------------&apos;);</span><br><span class="line">    console.log(mouseTime)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：个人博客 <a href="https://langgithub.github.io/">https://langgithub.github.io/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;滑块验证码破解&quot;&gt;&lt;a href=&quot;#滑块验证码破解&quot; class=&quot;headerlink&quot; title=&quot;滑块验证码破解&quot;&gt;&lt;/a&gt;滑块验证码破解&lt;/h1&gt;&lt;h3 id=&quot;方式一-数据发包&quot;&gt;&lt;a href=&quot;#方式一-数据发包&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="爬虫-js逆向" scheme="https://langgithub.github.io/categories/%E7%88%AC%E8%99%AB-js%E9%80%86%E5%90%91/"/>
    
    
      <category term="滑块验证码" scheme="https://langgithub.github.io/tags/%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>机器学习案例</title>
    <link href="https://langgithub.github.io/2020/06/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A1%88%E4%BE%8B/"/>
    <id>https://langgithub.github.io/2020/06/09/机器学习案例/</id>
    <published>2020-06-09T09:29:21.394Z</published>
    <updated>2020-06-09T09:29:21.394Z</updated>
    
    <content type="html"><![CDATA[<p>1.泰坦尼克号预测<br> <a href="https://blog.csdn.net/han_xiaoyang/article/details/49797143" target="_blank" rel="noopener">https://blog.csdn.net/han_xiaoyang/article/details/49797143</a><br>2.房屋估计预测<br> <a href="https://github.com/xiaoyusmd/Bj_HousePricePredict/blob/master/%E5%8C%97%E4%BA%AC%E4%BA%8C%E6%89%8B%E6%88%BF%E6%88%BF%E4%BB%B7%E9%A2%84%E6%B5%8B%E4%B8%8E%E5%88%86%E6%9E%90.ipynb" target="_blank" rel="noopener">https://github.com/xiaoyusmd/Bj_HousePricePredict/blob/master/%E5%8C%97%E4%BA%AC%E4%BA%8C%E6%89%8B%E6%88%BF%E6%88%BF%E4%BB%B7%E9%A2%84%E6%B5%8B%E4%B8%8E%E5%88%86%E6%9E%90.ipynb</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.泰坦尼克号预测&lt;br&gt; &lt;a href=&quot;https://blog.csdn.net/han_xiaoyang/article/details/49797143&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/
      
    
    </summary>
    
      <category term="算法-机器学习" scheme="https://langgithub.github.io/categories/%E7%AE%97%E6%B3%95-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="案例" scheme="https://langgithub.github.io/tags/%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>极客算法课</title>
    <link href="https://langgithub.github.io/2020/06/09/%E6%9E%81%E5%AE%A2%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    <id>https://langgithub.github.io/2020/06/09/极客算法课/</id>
    <published>2020-06-09T09:29:21.394Z</published>
    <updated>2020-06-09T09:29:21.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-刷题网站"><a href="#leetcode-刷题网站" class="headerlink" title="leetcode 刷题网站"></a>leetcode 刷题网站</h1><p><a href="https://leetcode-cn.com" target="_blank" rel="noopener">https://leetcode-cn.com</a></p><h1 id="算法题-github"><a href="#算法题-github" class="headerlink" title="算法题 github"></a>算法题 github</h1><p><a href="https://github.com/CyC2018" target="_blank" rel="noopener">https://github.com/CyC2018</a></p><h1 id="LUR-cache-最近最少使用替换"><a href="#LUR-cache-最近最少使用替换" class="headerlink" title="LUR cache (最近最少使用替换)"></a>LUR cache (最近最少使用替换)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"># Bloom Fillter</span><br></pre></td></tr></table></figure><ol><li>存在的元素存在误识别率，不存在肯定不存在</li><li>对于错误率修正 对存在的元素再再数据库中查询一遍</li><li>挡掉不存在元素，存在元素再数据库中搜索</li></ol><p><code>`</code></p><p>#</p><ol><li>priority Queue  一个任务的密度=重要程度/完成时间</li><li>kelly formula 凯利公式</li><li>game theory 博弈论</li></ol><p>#</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;leetcode-刷题网站&quot;&gt;&lt;a href=&quot;#leetcode-刷题网站&quot; class=&quot;headerlink&quot; title=&quot;leetcode 刷题网站&quot;&gt;&lt;/a&gt;leetcode 刷题网站&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-
      
    
    </summary>
    
      <category term="算法-数据结构" scheme="https://langgithub.github.io/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://langgithub.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>树相关题</title>
    <link href="https://langgithub.github.io/2020/06/09/%E6%A0%91%E7%9B%B8%E5%85%B3%E9%A2%98/"/>
    <id>https://langgithub.github.io/2020/06/09/树相关题/</id>
    <published>2020-06-09T09:29:21.394Z</published>
    <updated>2020-06-09T09:29:21.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-判断是否二叉搜索树"><a href="#1-判断是否二叉搜索树" class="headerlink" title="1. 判断是否二叉搜索树"></a>1. 判断是否二叉搜索树</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># Definition for a binary tree node.</span><br><span class="line">class TreeNode:</span><br><span class="line">     def __init__(self, x):</span><br><span class="line">         self.val = x</span><br><span class="line">         self.left = None</span><br><span class="line">         self.right = None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Solution:</span><br><span class="line">    node_list=[]</span><br><span class="line">    return_flag=True</span><br><span class="line">    def isValidBST(self, root: TreeNode) -&gt; bool:</span><br><span class="line">        self.in_order(root)</span><br><span class="line">        return self.return_flag</span><br><span class="line"></span><br><span class="line">    def in_order(self,root):</span><br><span class="line">        if root is None: return</span><br><span class="line">        self.isValidBST(root.left)</span><br><span class="line">        if not self.node_list or self.node_list[-1]&lt;root.val:</span><br><span class="line">            self.node_list.append(root.val)</span><br><span class="line">        else:</span><br><span class="line">            self.node_list.append(root.val)</span><br><span class="line">            self.return_flag= False</span><br><span class="line">            return</span><br><span class="line">        self.isValidBST(root.right)</span><br></pre></td></tr></table></figure><h1 id="2-二叉树的最近公共祖先"><a href="#2-二叉树的最近公共祖先" class="headerlink" title="2. 二叉树的最近公共祖先"></a>2. 二叉树的最近公共祖先</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def lowestCommonAncestor(self, root, p, q):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type root: TreeNode</span><br><span class="line">        :type p: TreeNode</span><br><span class="line">        :type q: TreeNode</span><br><span class="line">        :rtype: TreeNode</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if root == None or root.val ==q or root.val==p : return root</span><br><span class="line">        left = self.lowestCommonAncestor(root.left,p,q)</span><br><span class="line">        right= self.lowestCommonAncestor(root.right,p,q)</span><br><span class="line">        if left is None:</span><br><span class="line">            return right</span><br><span class="line">        elif right is None:</span><br><span class="line">            return left</span><br><span class="line">        else:</span><br><span class="line">            return root.val</span><br></pre></td></tr></table></figure><h1 id="3-二叉树广度优先遍历-BFS"><a href="#3-二叉树广度优先遍历-BFS" class="headerlink" title="3. 二叉树广度优先遍历 BFS"></a>3. 二叉树广度优先遍历 BFS</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def BFS(root):</span><br><span class="line"></span><br><span class="line">    q=[]</span><br><span class="line">    q.append(root)</span><br><span class="line">    num=[]</span><br><span class="line"></span><br><span class="line">    while q:</span><br><span class="line">        size=len(q)</span><br><span class="line"></span><br><span class="line">        current_num=[]</span><br><span class="line">        for i in range(size):</span><br><span class="line">            root=q.pop(0)</span><br><span class="line">            current_num.append(root.data)</span><br><span class="line">            if root.left_child is not None: q.append(root.left_child)</span><br><span class="line">            if root.right_child is not None: q.append(root.right_child)</span><br><span class="line">        num.append(current_num)</span><br><span class="line"></span><br><span class="line">    return num</span><br></pre></td></tr></table></figure><h1 id="4-二叉树深度优先遍历-DFS"><a href="#4-二叉树深度优先遍历-DFS" class="headerlink" title="4. 二叉树深度优先遍历 DFS"></a>4. 二叉树深度优先遍历 DFS</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def DFS(root):</span><br><span class="line">    if root is None:</span><br><span class="line">        return</span><br><span class="line">    print(root.data)</span><br><span class="line">    if root.left_child is not None: DFS(root.left_child)</span><br><span class="line">    if root.right_child is not None: DFS(root.right_child)</span><br></pre></td></tr></table></figure><p>1.二叉树</p><ol><li>构建二叉查找树</li><li>先序遍历</li><li>中序遍历</li><li>后序遍历</li><li>构建平衡二叉树</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">class TreeNode():</span><br><span class="line">    </span><br><span class="line">    def __init__(self,x):</span><br><span class="line">        self.left_child=None</span><br><span class="line">        self.right_child=None</span><br><span class="line">        self.data=x</span><br><span class="line"></span><br><span class="line">class Tree():</span><br><span class="line"></span><br><span class="line">    def __init__(self,x):</span><br><span class="line">        self.tree_data=[]</span><br><span class="line">        self.root=None</span><br><span class="line"></span><br><span class="line">    def insert(self,root,x):</span><br><span class="line">        &quot;&quot;&quot; 构造二叉查找树 &quot;&quot;&quot;</span><br><span class="line">        if root is None:</span><br><span class="line">            return TreeNode(x)</span><br><span class="line">        if root.data &gt; x:</span><br><span class="line">            root.left_child=self.insert(root.left_child,x)</span><br><span class="line">        else:</span><br><span class="line">            root.right_child=self.insert(root.right_child,x)</span><br><span class="line">        return root</span><br><span class="line"></span><br><span class="line">    def preorder(slef,root):</span><br><span class="line">        “”“ 先序遍历 ”“”</span><br><span class="line">        if not root : return</span><br><span class="line">        self.tree_data.append(root.data)</span><br><span class="line">        self.preorder(root.left_child)</span><br><span class="line">        self.preorder(root.right_child)</span><br><span class="line"></span><br><span class="line">    def inorder(slef,root):</span><br><span class="line">        “”“ 中序遍历 ”“”</span><br><span class="line">        if not root : return</span><br><span class="line">        self.inorder(root.left_child)</span><br><span class="line">        self.tree_data.append(root.data)</span><br><span class="line">        self.inorder(root.right_child)</span><br><span class="line"></span><br><span class="line">    def postorder(slef,root):</span><br><span class="line">        “”“ 后序遍历 ”“”</span><br><span class="line">        if not root : return</span><br><span class="line">        self.postorder(root.left_child)</span><br><span class="line">        self.postorder(root.right_child)</span><br><span class="line">        self.tree_data.append(root.data)</span><br><span class="line"></span><br><span class="line">    def insert2(self,root,x):</span><br><span class="line">        &quot;&quot;&quot; 构建平衡二叉树 &quot;&quot;&quot;</span><br><span class="line">        if root is None:</span><br><span class="line">            return TreeNode(x)</span><br><span class="line"></span><br><span class="line">        tree_node=[root]</span><br><span class="line">        wile True:</span><br><span class="line">            node=tree_node.pop(0)</span><br><span class="line">            if node.left_child is None:</span><br><span class="line">                node.left_child=TreeNode(x)</span><br><span class="line">                return root</span><br><span class="line">            elif node.right_child is None:</span><br><span class="line">                node.right_child=TreeNode(x)</span><br><span class="line">                return root</span><br><span class="line">            else:</span><br><span class="line">                tree_node.append(node.left_child)</span><br><span class="line">                tree_node.append(node.right_child)</span><br></pre></td></tr></table></figure><h1 id="2-树的子节点-判断是不是一颗树的子树"><a href="#2-树的子节点-判断是不是一颗树的子树" class="headerlink" title="2.树的子节点(判断是不是一颗树的子树)"></a>2.树的子节点(判断是不是一颗树的子树)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def subTree(root,sub_root):</span><br><span class="line">    if root is None or sub_root is None:</span><br><span class="line">        return false</span><br><span class="line"></span><br><span class="line">    return isSubTree(root,sub_root) || subTree(root.left,sub_root) || subTree(root.right,sub_root)</span><br><span class="line"></span><br><span class="line">def isSubTree(root,sub_root):</span><br><span class="line">    if sub_root is None:</span><br><span class="line">        return True</span><br><span class="line">    if root is None:</span><br><span class="line">        return False</span><br><span class="line">    if root.data!= sub_root.data:</span><br><span class="line">        return False</span><br><span class="line">    return isSubTree(root.left,sub_root.left) and isSubTree(root.right,sub_root.right)</span><br></pre></td></tr></table></figure><h1 id="3-二叉树的镜像"><a href="#3-二叉树的镜像" class="headerlink" title="3.二叉树的镜像"></a>3.二叉树的镜像</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def mirror(root)</span><br><span class="line">    if root is None:</span><br><span class="line">        return</span><br><span class="line">    swap(root)</span><br><span class="line">    mirror(root.left)</span><br><span class="line">    mirror(root.right)</span><br><span class="line"></span><br><span class="line">def swap(root)</span><br><span class="line">    root.left,root.right=root.right,root.left</span><br></pre></td></tr></table></figure><h1 id="4-判处是否是对称二叉树"><a href="#4-判处是否是对称二叉树" class="headerlink" title="4.判处是否是对称二叉树"></a>4.判处是否是对称二叉树</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def subTree(root):</span><br><span class="line">    if root is None:</span><br><span class="line">        return false</span><br><span class="line">    return isSubTree(root.eft,root.right)</span><br><span class="line"></span><br><span class="line">def isSubTree(root,sub_root):</span><br><span class="line">    if sub_root is None:</span><br><span class="line">        return True</span><br><span class="line">    if root is None:</span><br><span class="line">        return False</span><br><span class="line">    if root.data!= sub_root.data:</span><br><span class="line">        return False</span><br><span class="line">    return isSubTree(root.left,sub_root.left) and isSubTree(root.right,sub_root.right)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-判断是否二叉搜索树&quot;&gt;&lt;a href=&quot;#1-判断是否二叉搜索树&quot; class=&quot;headerlink&quot; title=&quot;1. 判断是否二叉搜索树&quot;&gt;&lt;/a&gt;1. 判断是否二叉搜索树&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;ta
      
    
    </summary>
    
      <category term="面试" scheme="https://langgithub.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="算法" scheme="https://langgithub.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>机器学习—路线图</title>
    <link href="https://langgithub.github.io/2020/06/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E2%80%94%E8%B7%AF%E7%BA%BF%E5%9B%BE/"/>
    <id>https://langgithub.github.io/2020/06/09/机器学习—路线图/</id>
    <published>2020-06-09T09:29:21.394Z</published>
    <updated>2020-06-09T09:29:21.394Z</updated>
    
    <content type="html"><![CDATA[<p>机器学习数据处理步骤：</p><h1 id="机器学习基础与实践（一）—-数据清洗"><a href="#机器学习基础与实践（一）—-数据清洗" class="headerlink" title="机器学习基础与实践（一）—-数据清洗"></a><a href="https://www.cnblogs.com/charlotte77/p/5606926.html" target="_blank" rel="noopener">机器学习基础与实践（一）—-数据清洗</a></h1><h1 id="机器学习基础与实践（二）—-数据转换"><a href="#机器学习基础与实践（二）—-数据转换" class="headerlink" title="机器学习基础与实践（二）—-数据转换"></a><a href="https://www.cnblogs.com/charlotte77/p/5622325.html" target="_blank" rel="noopener">机器学习基础与实践（二）—-数据转换</a></h1><h1 id="机器学习基础与实践（三）—-数据降维之PCA"><a href="#机器学习基础与实践（三）—-数据降维之PCA" class="headerlink" title="机器学习基础与实践（三）—-数据降维之PCA"></a><a href="https://www.cnblogs.com/charlotte77/p/5625984.html" target="_blank" rel="noopener">机器学习基础与实践（三）—-数据降维之PCA</a></h1><p>基本机器学习算法推导：<br>决策树：<a href="https://blog.csdn.net/yen_csdn/article/details/79012871" target="_blank" rel="noopener">https://blog.csdn.net/yen_csdn/article/details/79012871</a><br>KNN分类：<a href="http://www.cnblogs.com/bahcelor/p/7239997.html" target="_blank" rel="noopener">http://www.cnblogs.com/bahcelor/p/7239997.html</a><br>SVM:<a href="https://blog.csdn.net/zxllll8898/article/details/53404484" target="_blank" rel="noopener">https://blog.csdn.net/zxllll8898/article/details/53404484</a><br>神经网络：<a href="https://www.cnblogs.com/bahcelor/p/7252394.html" target="_blank" rel="noopener">https://www.cnblogs.com/bahcelor/p/7252394.html</a><br>K-means：<a href="https://blog.csdn.net/loveliuzz/article/details/78052711" target="_blank" rel="noopener">https://blog.csdn.net/loveliuzz/article/details/78052711</a><br>卷积神经网络：<a href="https://www.cnblogs.com/skyfsm/p/6790245.html" target="_blank" rel="noopener">https://www.cnblogs.com/skyfsm/p/6790245.html</a></p><p>深度学习推导：<br><a href="https://www.zybuluo.com/hanbingtao/note/433855" target="_blank" rel="noopener">零基础入门深度学习(1) - 感知器</a><br><a href="https://www.zybuluo.com/hanbingtao/note/448086" target="_blank" rel="noopener">零基础入门深度学习(2) - 线性单元和梯度下降</a><br><a href="https://www.zybuluo.com/hanbingtao/note/476663" target="_blank" rel="noopener">零基础入门深度学习(3) - 神经网络和反向传播算法</a><br><a href="https://www.zybuluo.com/hanbingtao/note/485480" target="_blank" rel="noopener">零基础入门深度学习(4) - 卷积神经网络</a><br><a href="https://zybuluo.com/hanbingtao/note/541458" target="_blank" rel="noopener">零基础入门深度学习(5) - 循环神经网络</a><br><a href="https://zybuluo.com/hanbingtao/note/581764" target="_blank" rel="noopener">零基础入门深度学习(6) - 长短时记忆网络(LSTM)</a><br><a href="https://zybuluo.com/hanbingtao/note/626300" target="_blank" rel="noopener">零基础入门深度学习(7) - 递归神经网络</a></p><p>难点：<br>pca降维推导：<a href="https://www.cnblogs.com/tbiiann/p/6259459.html" target="_blank" rel="noopener">https://www.cnblogs.com/tbiiann/p/6259459.html</a><br>svd分解推导：<a href="https://www.cnblogs.com/tbiiann/p/6262397.html" target="_blank" rel="noopener">https://www.cnblogs.com/tbiiann/p/6262397.html</a><br>机器学习中的距离：<a href="https://www.cnblogs.com/tbiiann/p/5968784.html" target="_blank" rel="noopener">https://www.cnblogs.com/tbiiann/p/5968784.html</a><br>最小二乘法法推导：<a href="https://www.cnblogs.com/paiandlu/p/7843236.html" target="_blank" rel="noopener">https://www.cnblogs.com/paiandlu/p/7843236.html</a><br>svm手推：<a href="https://blog.csdn.net/v_july_v/article/details/7624837" target="_blank" rel="noopener">https://blog.csdn.net/v_july_v/article/details/7624837</a><br>kkt条件解释：<a href="https://www.cnblogs.com/liaohuiqiang/p/7805954.html" target="_blank" rel="noopener">https://www.cnblogs.com/liaohuiqiang/p/7805954.html</a><br>gbdt：<a href="https://blog.csdn.net/lyzmyy/article/details/45665105?utm_source=blogxgwz3" target="_blank" rel="noopener">https://blog.csdn.net/lyzmyy/article/details/45665105?utm_source=blogxgwz3</a><br>或者 <a href="https://blog.csdn.net/v_july_v/article/details/40718799" target="_blank" rel="noopener">https://blog.csdn.net/v_july_v/article/details/40718799</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;机器学习数据处理步骤：&lt;/p&gt;
&lt;h1 id=&quot;机器学习基础与实践（一）—-数据清洗&quot;&gt;&lt;a href=&quot;#机器学习基础与实践（一）—-数据清洗&quot; class=&quot;headerlink&quot; title=&quot;机器学习基础与实践（一）—-数据清洗&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http
      
    
    </summary>
    
      <category term="算法-机器学习" scheme="https://langgithub.github.io/categories/%E7%AE%97%E6%B3%95-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://langgithub.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>源码刷机-环境搭建（ubuntu 14.04.5 编译Android 4.4.4 r1源码）</title>
    <link href="https://langgithub.github.io/2020/06/09/%E6%BA%90%E7%A0%81%E5%88%B7%E6%9C%BA-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88ubuntu%2014.04.5%20%E7%BC%96%E8%AF%91Android%20%E6%BA%90%E7%A0%81%EF%BC%89/"/>
    <id>https://langgithub.github.io/2020/06/09/源码刷机-环境搭建（ubuntu 14.04.5 编译Android 源码）/</id>
    <published>2020-06-09T09:29:21.394Z</published>
    <updated>2020-06-09T09:29:21.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android刷机步骤"><a href="#Android刷机步骤" class="headerlink" title="Android刷机步骤"></a>Android刷机步骤</h1><ol><li>jdk安装</li><li>ubuntu环境配置</li><li>android源码下载</li><li>驱动下载</li><li>编译</li><li>刷入手机</li><li>源码阅读</li></ol><h3 id="一·JDK安装"><a href="#一·JDK安装" class="headerlink" title="一·JDK安装"></a>一·JDK安装</h3><p>编译Android4.x的源码是不能用OpenJDK，需要用Oracle JDK 1.6，Oracle JDK 1.7目前是不支持的；编译Android 5.x版本以后的源码不再能使用Oracle JDK，需要使用OpenJDK 7版本。从下载页 <a href="http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html#jdk-6u45-oth-JPR" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html#jdk-6u45-oth-JPR</a><br>下载Linux x64bit版本Oracle JDK 1.60_45.</p><ol><li><p>解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/androidcode/AndroidDevlop</span><br><span class="line">sudo chmod u+x jdk-6u45-linux-x64.bin</span><br><span class="line">sudo ./jdk-6u45-linux-x64.bin</span><br></pre></td></tr></table></figure></li><li><p>环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/profile</span><br><span class="line"></span><br><span class="line"># 添加java环境变量</span><br><span class="line">export JAVA_HOME=/home/androidcode/AndroidDevlop/jdk1.6.0_45</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export PATH=$PATH:$&#123;JAVA_HOME&#125;/bin</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line">javac</span><br></pre></td></tr></table></figure></li></ol><h3 id="二-ubuntu环境配置"><a href="#二-ubuntu环境配置" class="headerlink" title="二.ubuntu环境配置"></a>二.ubuntu环境配置</h3><ol><li>ssh配置 参考博客：linux免密钥登陆</li><li><p>编译环境配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install git gnupg flex bison gperf build-essential zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dri:i386 libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 dpkg-dev  </span><br><span class="line"></span><br><span class="line">$ sudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so</span><br><span class="line"># 注：遇到问题参考 http://www.voidcn.com/article/p-fxftmkft-bpy.html</span><br></pre></td></tr></table></figure></li><li><p>我遇到的安装错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#libcheese7</span><br><span class="line">$ sudo apt-get remove   libcheese-gtk23 libcheese7</span><br><span class="line">$ sudo apt-get install  libcheese-gtk23 libcheese7</span><br><span class="line"></span><br><span class="line">#g++</span><br><span class="line">$ sudo apt-get install g++</span><br><span class="line">$ sudo apt-get install g++-multilib</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-android源码下载"><a href="#三-android源码下载" class="headerlink" title="三.android源码下载"></a>三.android源码下载</h3><ol><li><p>安装repo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;lang&quot;</span><br><span class="line">$ git config --global user.email &quot;lang@gmail.com&quot;</span><br><span class="line"></span><br><span class="line"># 下载repo 脚本 (一个依赖python2.7 文件下载脚步。可以换网址)</span><br><span class="line">$ mkdir android</span><br><span class="line">$ cd android</span><br><span class="line">$ curl https://storage.googleapis.com/git-repo-downloads/repo &gt; repo</span><br><span class="line">$ chmod a+x repo</span><br><span class="line"></span><br><span class="line"># 替换源repo脚步中的源</span><br><span class="line"># REPO_URL = &apos;https://aosp.tuna.tsinghua.edu.cn/git-repo&apos;</span><br></pre></td></tr></table></figure></li><li><p>android源码下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-4.4.4_r1</span><br><span class="line"></span><br><span class="line">$ repo sync</span><br></pre></td></tr></table></figure></li><li><p>涉及问题 repo脚步获取需要翻墙，也可以用国内源代替</p></li><li>也可以从百度云下载源码 <a href="http://pan.baidu.com/s/1ngsZs" target="_blank" rel="noopener">http://pan.baidu.com/s/1ngsZs</a></li></ol><h3 id="四-驱动下载"><a href="#四-驱动下载" class="headerlink" title="四.驱动下载"></a>四.驱动下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在https://developers.google.com/android/drivers#hammerheadktu84p 下载对应版本驱动 这里是 KTU84P，下载文件有如下，移动到Android源码解压后运行里面 .sh 生成vendor文件夹</span><br><span class="line">1. lge-hammerhead-ktu84p-49419c39.tgz</span><br><span class="line">2. qcom-hammerhead-ktu84p-f159eadf.tgz</span><br><span class="line">3. broadcom-hammerhead-ktu84p-5a5bf60e.tgz</span><br></pre></td></tr></table></figure><h3 id="五-编译"><a href="#五-编译" class="headerlink" title="五.编译"></a>五.编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 初始化环境</span><br><span class="line">$ source build/envsetup.sh</span><br><span class="line"></span><br><span class="line"># 选择编译版本</span><br><span class="line">$ lunch 7 </span><br><span class="line"></span><br><span class="line"># 编译性能参数 8=电脑核心数*2</span><br><span class="line">$ make -j8</span><br></pre></td></tr></table></figure><h3 id="六-刷入手机"><a href="#六-刷入手机" class="headerlink" title="六.刷入手机"></a>六.刷入手机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 连接电脑</span><br><span class="line">$ sudo adb reboot bootloader</span><br><span class="line"># 查看手机状态 如果没有，查看fastboot 权限</span><br><span class="line">$ fastboot devices </span><br><span class="line">$ fastboot -w flashall</span><br></pre></td></tr></table></figure><h3 id="七-源码阅读"><a href="#七-源码阅读" class="headerlink" title="七.源码阅读"></a>七.源码阅读</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第一步，这行命令的意思是编译idegen这个项目，生成idegen.jar文件。</span><br><span class="line">$ mmm development/tools/idegen/</span><br><span class="line">如果你看到了绿色的 #### make completed successfully  ####，说明这步是ok的。</span><br><span class="line">第二步，这行命令的意思是生成:android.iws, android.ipr, android.iml这个三个文件。</span><br><span class="line">$ sh ./development/tools/idegen/idegen.sh</span><br><span class="line">第三步, as 导入 android.ipr</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android刷机步骤&quot;&gt;&lt;a href=&quot;#Android刷机步骤&quot; class=&quot;headerlink&quot; title=&quot;Android刷机步骤&quot;&gt;&lt;/a&gt;Android刷机步骤&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;jdk安装&lt;/li&gt;
&lt;li&gt;ubuntu环境配置&lt;/l
      
    
    </summary>
    
      <category term="爬虫-Android逆向" scheme="https://langgithub.github.io/categories/%E7%88%AC%E8%99%AB-Android%E9%80%86%E5%90%91/"/>
    
    
      <category term="Android刷机" scheme="https://langgithub.github.io/tags/Android%E5%88%B7%E6%9C%BA/"/>
    
  </entry>
  
</feed>
